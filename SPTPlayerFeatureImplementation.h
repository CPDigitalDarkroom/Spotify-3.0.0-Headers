//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "SPTFeature.h"
#import "SPTPlayerFeature.h"

@class NSString, SPTAllocationContext, SPTApplicationStatePlaybackLogger, SPTAudioSessionController, SPTGaiaDeviceManager, SPTPlaybackErrorPicker, SPTPlaybackStateRestorer, SPTPlaybackStateStoreController, SPTPlaybackStateTimer, SPTPlayedStateManager, SPTPlayerExternalLinkControllerPlaybackDelegate, SPTPlayerResolverRegistration, SPTPlayerSubscription, SPTRouter;

@interface SPTPlayerFeatureImplementation : NSObject <SPTFeature, SPTPlayerFeature>
{
    id <BaseFeature> _base;
    id <CosmosFeature> _cosmos;
    id <SettingsFeature> _settingsFeature;
    long _initOnceToken;
    SPTPlayerResolverRegistration *_playerResolverRegistration;
    SPTRouter *_router;
    SPTPlayerSubscription *_playerSubscription;
    SPTAudioSessionController *_audioSessionController;
    SPTPlaybackErrorPicker *_playbackErrorPicker;
    shared_ptr_6519f712 _scheduler;
    struct PlayerStack _playerStack;
    shared_ptr_77186a83 _contextPlayer;
    struct shared_ptr<spotify::player::cosmos::LegacyCosmosContextPageLoader> _pageLoader;
    struct shared_ptr<spotify::player::VolatileContextPlayer> _volatileContextPlayer;
    struct shared_ptr<spotify::player::ProxyContextPlayer> _proxyContextPlayer;
    struct shared_ptr<spotify::player::SyncPlayQueue> _localPlayQueue;
    struct shared_ptr<spotify::player::ProxyPlayQueue> _proxyPlayQueue;
    shared_ptr_1ac160cb _mftSequenceRules;
    SPTPlaybackStateRestorer *_stateRestorer;
    SPTPlaybackStateTimer *_stateTimer;
    SPTPlaybackStateStoreController *_stateStoreController;
    SPTApplicationStatePlaybackLogger *_logger;
    id <SPTPlayer> _observationPlayer;
    SPTPlayerExternalLinkControllerPlaybackDelegate *_externalLinkControllerPlaybackDelegate;
    scoped_ptr_33d823b1 _playerPlayer;
    struct SPTGaiaDeviceManagerFactoryProducts _gaia_factory_products;
    SPTPlayedStateManager *_played_state_manager;
    SPTGaiaDeviceManager *_gaiaDeviceManager;
}

+ (BOOL)knownToBeOffline;
+ (id)featureDependencies;
+ (id)featureIdentifier;
@property(readonly, nonatomic) SPTGaiaDeviceManager *gaiaDeviceManager; // @synthesize gaiaDeviceManager=_gaiaDeviceManager;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)logPlayerLoadEvent:(id)arg1;
@property(readonly) shared_ptr_77186a83 player;
- (id)provideResolver;
@property(readonly, nonatomic) SPTPlayedStateManager *playedStateManager;
- (void)loadPlaybackErrorPicker;
- (id)provideAudioSessionController;
- (id)providePlayerQueue;
- (id)provideTrackContextPlayerWithViewURI:(id)arg1 featureIdentifier:(id)arg2 decorateTrack:(CDUnknownBlockType)arg3;
- (id)provideTrackContextPlayerWithViewURI:(id)arg1 featureIdentifier:(id)arg2;
- (void)removePlayerObserver:(id)arg1;
- (void)addPlayerObserver:(id)arg1;
- (void)fetchPlayerState:(CDUnknownBlockType)arg1 on:(id)arg2;
- (void)loadObservationPlayer;
- (id)providePlayerWithViewURI:(id)arg1 playerSubscription:(id)arg2 resolver:(id)arg3 featureIdentifier:(id)arg4;
- (id)providePlayerWithViewURI:(id)arg1 featureIdentifier:(id)arg2;
- (id)playerSubscription;
- (id)resolver;
- (void)loadLazily;
- (void)loadTAUtilities;
- (void)loadPlayerResolvers;
- (void)loadExternalLinkControllerPlaybackDelegate;
- (void)loadGaia;
- (void)loadStateLogger;
- (void)loadStateStoreController;
- (void)loadStateTimer;
- (id)providePlaybackRepresentation;
- (void)loadStateRestorer;
- (void)loadAudioSessionController;
- (int)offlineState;
- (shared_ptr_77186a83)contextPlayerToActOn;
- (void)loadContextPlayer;
- (void)loadScheduler;
- (void)loadPlayerSubscriptionWithResolver:(id)arg1;
- (id)loadRouter;
- (void)unload;
- (void)load;
- (void)configureWithFeatures:(id)arg1;

// Remaining properties
@property(retain, nonatomic) SPTAllocationContext *allocationContext;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

