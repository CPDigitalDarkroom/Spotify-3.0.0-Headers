//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

@class SPApHermesRequest, SPCollectionController, SPCore, SPTGaiaDeviceManager, SPTOfflineManager, SPUser;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AUSoundDriver {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    _Bool _field3;
    struct _opaque_pthread_mutex_t _field4;
    struct _opaque_pthread_cond_t _field5;
    struct _opaque_pthread_t *_field6;
    struct signal<void (), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void ()>, boost::function<void (const boost::signals2::connection &)>, boost::signals2::mutex> _field7;
    struct AudioStreamBasicDescription _field8;
    struct OpaqueAUGraph *_field9;
    struct mutex _field10;
    int _field11;
    int _field12;
    int _field13;
    _Bool _field14;
    _Bool _field15;
    struct SoundDriverStats _field16;
    unsigned int _field17;
    _Bool _field18;
    float _field19;
    float _field20;
    float _field21;
    struct Mutex {
        struct _opaque_pthread_mutex_t _field1;
    } _field22;
    struct SoundBufEnt *_field23;
    struct SoundBufEnt *_field24;
    unsigned int _field25;
    struct OpaqueAudioComponentInstance *_field26;
    struct OpaqueAudioComponentInstance *_field27;
    id _field28;
    _Bool _field29;
};

struct AVConnectionType;

struct AVPlayerState;

struct ActivityPeriod {
    int _field1;
    int _field2;
};

struct AdChooser;

struct AdId {
    unsigned char _id[16];
};

struct AdInventoryConfig {
    _Bool _field1;
    struct optional<spotify::ads::AdStreamRule> _field2;
    struct optional<std::__1::basic_string<char>> _field3;
};

struct AdManagerInterface;

struct AdsCore;

struct AlbumGroup;

struct AlbumId {
    unsigned char _id[16];
};

struct AlbumInfo {
    CDUnknownFunctionPointerType *_field1;
    struct SpRefCount _field2;
    _Bool _field3;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    union {
        struct PlacementNewable<sp::AlbumInfo::SpotifyAlbum> _field1;
        struct PlacementNewable<sp::AlbumInfo::Show> _field2;
    } _field4;
};

struct AlbumMetadata {
    CDUnknownFunctionPointerType *_field1;
    struct SpRefCount _field2;
    struct RefPtr<sp::AlbumInfo> _field3;
    struct Array<sp::AlbumMetadata::Disc, const sp::AlbumMetadata::Disc &, 64, true> _field4;
    Array_d2b128ec _field5;
    struct Array<base::String, const base::String &, 64, true> _field6;
    struct Array<base::String, const base::String &, 64, true> _field7;
    Array_d2b128ec _field8;
};

struct Allocator<capu::GenericListNode<EtchRuntimeListener *>>;

struct Allocator<capu::GenericListNode<const EtchObjectType *>>;

struct ApHandler;

struct ApResolver {
    CDUnknownFunctionPointerType *_field1;
};

struct ApplicationKey {
    unsigned char _field1;
    struct array<unsigned char, 128> _field2;
    struct array<unsigned char, 192> _field3;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field4;
    struct array<unsigned char, 20> _field5;
};

struct ApplicationStateTracker {
    int _field1;
    struct signal<void (int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (int)>, boost::function<void (const boost::signals2::connection &, int)>, boost::signals2::mutex> _field2;
};

struct Array<base::String, const base::String &, 64, true> {
    struct String *_field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct Array<boost::function<void (const std::__1::vector<base::String, std::__1::allocator<base::String>>&)>, const boost::function<void (const std::__1::vector<base::String, std::__1::allocator<base::String>>&)>&, 64, true> {
    struct function<void (const std::__1::vector<base::String, std::__1::allocator<base::String>>&)> *_field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct Array<sp::AlbumGroup, const sp::AlbumGroup &, 64, true> {
    struct AlbumGroup *_field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct Array<sp::AlbumMetadata::Disc, const sp::AlbumMetadata::Disc &, 64, true> {
    struct Disc *_field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct Array<sp::BiographyOrReview, const sp::BiographyOrReview &, 64, true> {
    struct BiographyOrReview *_field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct Array<sp::Picture, const sp::Picture &, 64, true> {
    struct Picture *_field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct Array<sp::SocialManagerListener *, sp::SocialManagerListener *const &, 64, true> {
    struct SocialManagerListener **_field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct Array<sp::SocialUserDataObserver *, sp::SocialUserDataObserver *const &, 64, true> {
    struct SocialUserDataObserver **_field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct Array<sp::TrackRef *, sp::TrackRef *const &, 64, true> {
    struct TrackRef **_field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct Array<sp::UnionTrackListItem, const sp::UnionTrackListItem &, 64, true> {
    struct UnionTrackListItem *_field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct Array<sp::UserListCollector *, sp::UserListCollector *const &, 64, true> {
    struct UserListCollector **_field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct Array<spotify::tl::ScopedObserver<sp::SocialUserData, sp::SocialUserDataObserver>, const spotify::tl::ScopedObserver<sp::SocialUserData, sp::SocialUserDataObserver>&, 64, true> {
    struct ScopedObserver<sp::SocialUserData, sp::SocialUserDataObserver> *_field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct Array<spotify::uri::SpotifyLink, const spotify::uri::SpotifyLink &, 64, true> {
    struct SpotifyLink *_field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct ArtistId {
    unsigned char _id[16];
};

struct ArtistInfo {
    CDUnknownFunctionPointerType *_field1;
    struct SpRefCount _field2;
    struct String _field3;
    struct ArtistId _field4;
    struct ImageId _field5;
    struct Size _field6;
    struct ImageId _field7;
    struct ImageId _field8;
    struct ImageId _field9;
    unsigned char _field10;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct ArtistMetadata {
    CDUnknownFunctionPointerType *_field1;
    struct SpRefCount _field2;
    struct RefPtr<sp::ArtistInfo> _field3;
    Array_d2b128ec _field4;
    Array_3df85c80 _field5;
    Array_3df85c80 _field6;
    Array_3df85c80 _field7;
    Array_3df85c80 _field8;
    Array_d2b128ec _field9;
    struct Array<sp::BiographyOrReview, const sp::BiographyOrReview &, 64, true> _field10;
    struct Array<base::String, const base::String &, 64, true> _field11;
    struct ActivityPeriod _field12;
};

struct AsArray<const spotify::uri::SpotifyLink> {
    struct SpotifyLink *_field1;
    unsigned int _field2;
};

struct AsArray<spotify::collection::CollectionListItem<const sp::ArtistInfo *>> {
    struct CollectionListItem<const sp::ArtistInfo *> *_field1;
    unsigned int _field2;
};

struct AudioDecompressor {
    CDUnknownFunctionPointerType *_field1;
};

struct AudioFilePlayerIos {
    CDUnknownFunctionPointerType *_field1;
    struct AudioPlayerObserver *_field2;
    int _field3;
    id _field4;
    struct AudioStats *_field5;
    _Bool _field6;
    _Bool _field7;
    double _field8;
    char *_field9;
};

struct AudioInfo {
    struct function<spotify::playback::SoundDriver *()> _field1;
};

struct AudioPlayerObserver;

struct AudioStats;

struct AudioStreamBasicDescription {
    double _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
};

struct BITCrashManagerCallbacks {
    void *_field1;
    CDUnknownFunctionPointerType _field2;
};

struct BMWRemotingClientFactory {
    CDUnknownFunctionPointerType *_field1;
};

struct BiographyOrReview;

struct CGAffineTransform {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
};

struct CGPoint {
    float x;
    float y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    float width;
    float height;
};

struct CGVector {
    float dx;
    float dy;
};

struct CResolverWrapper;

struct CacheInfo {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
};

struct CachedPlaylistAttributes {
    struct String _field1;
    _Bool _field2;
    int _field3;
};

struct CollectionFeatureContainer;

struct CollectionListItem<const sp::ArtistInfo *>;

struct CollectionMetadataCacheSyncer {
    CDUnknownFunctionPointerType *_field1;
    struct MetadataCache *_field2;
    struct ScopedObserverList<spotify::collection::Collection, spotify::collection::CollectionObserver> _field3;
};

struct CollectionModel;

struct CollectionObserver;

struct CollectionOfflineController {
    CDUnknownFunctionPointerType *_field1;
    struct OfflineManagerApi *_field2;
    shared_ptr_3053ad6d _field3;
    struct unordered_map<spotify::uri::SpotifyLink, spotify::collection::CollectionOfflineController::ListData, boost::hash<spotify::uri::SpotifyLink>, std::__1::equal_to<spotify::uri::SpotifyLink>, std::__1::allocator<std::__1::pair<const spotify::uri::SpotifyLink, spotify::collection::CollectionOfflineController::ListData>>> _field4;
    struct signal<void (const spotify::uri::SpotifyLink &, bool), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (const spotify::uri::SpotifyLink &, bool)>, boost::function<void (const boost::signals2::connection &, const spotify::uri::SpotifyLink &, bool)>, boost::signals2::mutex> _field5;
    struct Timer _field6;
    struct unordered_set<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>, boost::hash<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>>, std::__1::equal_to<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>>, std::__1::allocator<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>>> _field7;
    struct JobRunner<base::Job<spotify::item_list::Snapshot<base::RefPtr<spotify::item_list::TrackRow>>, spotify::item_list::ItemListInterface::ErrorType>> _field8;
};

struct CollectionOfflineHelper;

struct CollectionShowModel {
    CDUnknownFunctionPointerType *_field1;
};

struct Comparator;

struct ConnectivityDataSource;

struct ConnectivityManager {
    int _field1;
    int _field2;
    _Bool _field3;
    unsigned int _field4;
    unsigned int _field5;
    struct signal<void (), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void ()>, boost::function<void (const boost::signals2::connection &)>, boost::signals2::mutex> _field6;
    unsigned int _field7;
    struct scoped_ptr<sp::ConnectivityDataSource> _field8;
};

struct ConsoleLogAppender {
    CDUnknownFunctionPointerType *_field1;
    struct Mutex {
        struct _opaque_pthread_mutex_t _field1;
        struct _opaque_pthread_mutexattr_t {
            long _field1;
            char _field2[8];
        } _field2;
    } _field2;
};

struct ContextPlayer;

struct ContextPlayerOptionOverrides {
    struct optional<bool> _field1;
    struct optional<bool> _field2;
    struct optional<bool> _field3;
};

struct ContextPlayerPrefetcher;

struct ContextPlayerRules;

struct ContextTrack {
    struct shared_ptr<spotify::player::ContextTrackMetadata> _field1;
};

struct ContextTrackMetadata;

struct Core {
    CDUnknownFunctionPointerType *_field1;
};

struct CoreCreateOptions {
    struct ApplicationKey _field1;
    int _field2;
    struct CacheInfo _field3;
    struct DeviceInfo _field4;
    struct VersionInfo _field5;
    struct AudioInfo _field6;
    struct PlatformFactory _field7;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field8;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field9;
    _Bool _field10;
};

struct CoreLookups {
    CDUnknownFunctionPointerType *_field1;
};

struct CoreTime {
    CDUnknownFunctionPointerType *_field1;
    struct SpRefCount _field2;
    struct SpinLock _field3;
    long long _field4;
    long long _field5;
    unsigned int _field6;
    unsigned int _field7;
    int _field8;
    struct function<unsigned int ()> _field9;
    struct function<unsigned int ()> _field10;
    struct function<void ()> _field11;
};

struct Date {
    unsigned int year;
    unsigned int month;
    unsigned int mday;
    unsigned int wday;
    unsigned int hour;
    unsigned int minute;
    unsigned int second;
    unsigned int usecond;
};

struct DeviceInfo {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field5;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field6;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field7;
};

struct Disc;

struct EpisodeId {
    unsigned char _id[16];
};

struct EtchAsyncResult<EtchBool>;

struct EtchAsyncResult<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject>>, EtchObjectHash>>;

struct EtchAsyncResult<EtchInt32>;

struct EtchAsyncResult<EtchNativeArray<signed char>>;

struct EtchAsyncResult<EtchObject>;

struct EtchAsyncResult<EtchString>;

struct EtchAsyncResult<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo>;

struct EtchAsyncResultNone;

struct EtchBool;

struct EtchByte;

struct EtchComparator<EtchString>;

struct EtchDeliveryService;

struct EtchException;

struct EtchHashTable<EtchString, EtchObject *, EtchComparator<EtchString>, EtchObjectHash> {
    CDUnknownFunctionPointerType *_field1;
    struct List<const EtchObjectType *, capu::Allocator<capu::GenericListNode<const EtchObjectType *>>, capu::Comparator> _field2;
    struct HashTable<EtchString, EtchObject *, EtchComparator<EtchString>, EtchObjectHash> _field3;
};

struct EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject>>, EtchObjectHash>;

struct EtchInt32 {
    CDUnknownFunctionPointerType *_field1;
    struct List<const EtchObjectType *, capu::Allocator<capu::GenericListNode<const EtchObjectType *>>, capu::Comparator> _field2;
    int _field3;
};

struct EtchLogger {
    CDUnknownFunctionPointerType *_field1;
    struct HashSet<capu::LogContext *, capu::Comparator, capu::CapuDefaultHashFunction> _field2;
    struct HashSet<capu::ILogAppender *, capu::Comparator, capu::CapuDefaultHashFunction> _field3;
    struct LogContext *_field4;
    struct LogContext *_field5;
    struct LogContext *_field6;
    struct LogContext *_field7;
    struct LogContext *_field8;
    struct LogContext *_field9;
    struct LogContext *_field10;
    struct LogContext *_field11;
};

struct EtchNativeArray<capu::SmartPointer<EtchObject>>;

struct EtchNativeArray<signed char>;

struct EtchObject;

struct EtchObjectType;

struct EtchResources {
    struct EtchResources *_field1;
    struct EtchHashTable<EtchString, EtchObject *, EtchComparator<EtchString>, EtchObjectHash> _field2;
};

struct EtchRuntime {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct EtchLogger _field3;
    struct ConsoleLogAppender _field4;
    unsigned long long _field5;
    struct Mutex {
        struct _opaque_pthread_mutex_t _field1;
        struct _opaque_pthread_mutexattr_t {
            long _field1;
            char _field2[8];
        } _field2;
    } _field6;
    struct List<EtchRuntimeListener *, capu::Allocator<capu::GenericListNode<EtchRuntimeListener *>>, capu::Comparator> _field7;
};

struct EtchRuntimeListener;

struct EtchShort;

struct EtchStack;

struct EtchString {
    CDUnknownFunctionPointerType *_field1;
    struct List<const EtchObjectType *, capu::Allocator<capu::GenericListNode<const EtchObjectType *>>, capu::Comparator> _field2;
    char *_field3;
    unsigned int _field4;
    unsigned int _field5;
};

struct EtchValueFactory;

struct EventInfo {
    int _field1;
    int _field2;
    union Data _field3;
};

struct FacebookApi;

struct FacebookPermissions;

struct FacebookPublisher;

struct FacebookScrobbler;

struct FacebookService {
    CDUnknownFunctionPointerType *_field1;
    struct String _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    int _field6;
    struct shared_ptr<base::RevocableStore::Store> _field7;
    struct weak_ptr<sp::FacebookService> _field8;
    struct WeakPtr<sp::SocialManager> _field9;
    struct FacebookApi *_field10;
    struct shared_ptr<sp::FacebookScrobbler> _field11;
    struct RefPtr<sp::CoreTime> _field12;
    struct RefPtr<spotify::http::Http> _field13;
    struct shared_ptr<sp::FacebookPublisher> _field14;
    int _field15;
    struct TimerManager *_field16;
    struct String _field17;
    struct String _field18;
    _Bool _field19;
    struct unordered_map<spotify::uri::SpotifyLink, std::__1::vector<base::String, std::__1::allocator<base::String>>, boost::hash<spotify::uri::SpotifyLink>, std::__1::equal_to<spotify::uri::SpotifyLink>, std::__1::allocator<std::__1::pair<const spotify::uri::SpotifyLink, std::__1::vector<base::String, std::__1::allocator<base::String>>>>> _field20;
    vector_553ebee1 _field21;
    struct vector<base::String, std::__1::allocator<base::String>> _field22;
    struct map<base::String, sp::ScrobblerErrorAction, std::__1::less<base::String>, std::__1::allocator<std::__1::pair<const base::String, sp::ScrobblerErrorAction>>> _field23;
    struct vector<base::String, std::__1::allocator<base::String>> _field24;
    struct map<base::String, sp::FacebookService::FacebookErrorClass, std::__1::less<base::String>, std::__1::allocator<std::__1::pair<const base::String, sp::FacebookService::FacebookErrorClass>>> _field25;
    _Bool _field26;
    struct Factory _field27;
    struct shared_ptr<sp::FacebookServiceRequestFactory> _field28;
    struct shared_ptr<sp::MeMetadataRequest> _field29;
    struct shared_ptr<sp::FriendsMetadataRequest> _field30;
    struct scoped_ptr<sp::OpenGraphPlaylistSyncer> _field31;
    struct scoped_ptr<sp::OpenGraphStarredPublisher> _field32;
    struct shared_ptr<sp::FacebookPermissions> _field33;
};

struct FacebookServiceRequestFactory;

struct FacebookUserData {
    struct String _field1;
    struct String _field2;
    struct String _field3;
    struct String _field4;
};

struct Factory {
    CDUnknownFunctionPointerType *_field1;
    struct RefPtr<spotify::http::Http> _field2;
};

struct FileId {
    unsigned char _id[20];
};

struct Flag;

struct FolderContext {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct WeakReferenceOwner _field4;
    struct SpRefCount _field5;
    struct RefPtr<sp::TrackListContext::UserInfoDelegate> _field6;
    struct RefPtr<sp::MetadataChangeBroadcaster> _field7;
    struct RefPtr<sp::TrackListContext::ShuffleDelegate> _field8;
    struct TimerManager *_field9;
    struct shared_ptr<spotify::crypto::Random> _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    int _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    _Bool _field22;
    int _field23;
    int _field24;
    struct vector<unsigned int, std::__1::allocator<unsigned int>> _field25;
    struct vector<unsigned int, std::__1::allocator<unsigned int>> _field26;
    unsigned int _field27;
    unsigned int _field28;
    struct RefPtr<const sp::ArtistInfo> _field29;
    int _field30;
    int _field31;
    void *_field32;
    int _field33;
    struct Origin _field34;
    unsigned int _field35;
    int _field36;
    struct String _field37;
    struct TrackRefTargetStore _field38;
    struct unordered_map<spotify::uri::TrackId, base::String, boost::hash<spotify::uri::TrackId>, std::__1::equal_to<spotify::uri::TrackId>, std::__1::allocator<std::__1::pair<const spotify::uri::TrackId, base::String>>> _field39;
    int _field40;
    int _field41;
    struct ScopedObserver<sp::MetadataChangeBroadcaster, sp::MetadataChangeObserver> _field42;
    struct RefPtr<sp::TrackListContextFilter> _field43;
    unsigned int _field44;
    int _field45;
    int _field46;
    struct Timer *_field47;
    int _field48;
    unsigned int _field49;
    int _field50;
    unsigned int _field51;
    int _field52;
    _Bool _field53;
    struct function<bool (const sp::TrackInfo *const &, const sp::TrackInfo *const &)> _field54;
    _Bool _field55;
    struct TrackListContextNotifier _field56;
    struct Array<sp::UnionTrackListItem, const sp::UnionTrackListItem &, 64, true> _field57;
    struct Timer _field58;
    _Bool _field59;
    CDUnknownFunctionPointerType *_field60;
    CDUnknownFunctionPointerType *_field61;
    struct unordered_map<const sp::TrackInfo *, unsigned int, boost::hash<const sp::TrackInfo *>, std::__1::equal_to<const sp::TrackInfo *>, std::__1::allocator<std::__1::pair<const sp::TrackInfo *const, unsigned int>>> _field62;
    struct unordered_map<sp::Playlist *, int, boost::hash<sp::Playlist *>, std::__1::equal_to<sp::Playlist *>, std::__1::allocator<std::__1::pair<sp::Playlist *const, int>>> _field63;
    struct ScopedPlaylistObserverList _field64;
};

struct FriendsMetadataRequest;

struct GADAdSize {
    struct CGSize size;
    unsigned int flags;
};

struct GaiaDeviceInterface;

struct GaiaManagerInterface;

struct GenericListNode<EtchRuntimeListener *> {
    struct EtchRuntimeListener *_field1;
    struct GenericListNode<EtchRuntimeListener *> *_field2;
    struct GenericListNode<EtchRuntimeListener *> *_field3;
};

struct GenericListNode<const EtchObjectType *> {
    struct EtchObjectType *_field1;
    struct GenericListNode<const EtchObjectType *> *_field2;
    struct GenericListNode<const EtchObjectType *> *_field3;
};

struct HashSet<capu::ILogAppender *, capu::Comparator, capu::CapuDefaultHashFunction> {
    struct HashTable<capu::ILogAppender *, char, capu::Comparator, capu::CapuDefaultHashFunction> _field1;
};

struct HashSet<capu::LogContext *, capu::Comparator, capu::CapuDefaultHashFunction> {
    struct HashTable<capu::LogContext *, char, capu::Comparator, capu::CapuDefaultHashFunction> _field1;
};

struct HashTable<EtchString, EtchObject *, EtchComparator<EtchString>, EtchObjectHash> {
    CDUnknownFunctionPointerType *_field1;
    unsigned char _field2;
    unsigned int _field3;
    unsigned int _field4;
    struct HashTableEntry **_field5;
    struct HashTableEntry *_field6;
    struct HashTableEntry *_field7;
    struct HashTableEntry *_field8;
    unsigned int _field9;
    _Bool _field10;
    struct EtchComparator<EtchString> _field11;
};

struct HashTable<capu::ILogAppender *, char, capu::Comparator, capu::CapuDefaultHashFunction> {
    CDUnknownFunctionPointerType *_field1;
    unsigned char _field2;
    unsigned int _field3;
    unsigned int _field4;
    struct HashTableEntry **_field5;
    struct HashTableEntry *_field6;
    struct HashTableEntry *_field7;
    struct HashTableEntry *_field8;
    unsigned int _field9;
    _Bool _field10;
    struct Comparator _field11;
};

struct HashTable<capu::LogContext *, char, capu::Comparator, capu::CapuDefaultHashFunction> {
    CDUnknownFunctionPointerType *_field1;
    unsigned char _field2;
    unsigned int _field3;
    unsigned int _field4;
    struct HashTableEntry **_field5;
    struct HashTableEntry *_field6;
    struct HashTableEntry *_field7;
    struct HashTableEntry *_field8;
    unsigned int _field9;
    _Bool _field10;
    struct Comparator _field11;
};

struct HashTableEntry;

struct HermesMessage;

struct HermesRequest;

struct Http;

struct HttpConnectionApple {
    CDUnknownFunctionPointerType *_field1;
    struct SpRefCount _field2;
    unsigned int _field3;
    struct Mutex {
        struct _opaque_pthread_mutex_t _field1;
    } _field4;
    unsigned int _field5;
    struct error_code _field6;
    int _field7;
    struct function<void (spotify::http::HttpConnection *)> _field8;
    struct function<void (spotify::http::HttpConnection *)> _field9;
    int _field10;
    struct String _field11;
    struct String _field12;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field13;
    unsigned int _field14;
    unsigned int _field15;
    struct unordered_map<std::__1::basic_string<char>, std::__1::basic_string<char>, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> _field16;
    int _field17;
    int _field18;
    struct TimerManager *_field19;
    struct weak_ptr<spotify::analytics::RequestAccounting> _field20;
    struct UrlComponents _field21;
    int _field22;
    int _field23;
    id _field24;
    id _field25;
    id _field26;
    id _field27;
    id _field28;
    int _field29;
};

struct IDEtchSessionCppAdaptor {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct ImageId {
    unsigned char _id[20];
};

struct Impl;

struct ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>;

struct JobRunner<base::Job<spotify::item_list::Snapshot<base::RefPtr<spotify::item_list::TrackRow>>, spotify::item_list::ItemListInterface::ErrorType>> {
    struct shared_ptr<base::JobRunner<base::Job<spotify::item_list::Snapshot<base::RefPtr<spotify::item_list::TrackRow>>, spotify::item_list::ItemListInterface::ErrorType>>::Impl> _field1;
};

struct LasertagClient;

struct LegacyCosmosContextPageLoader;

struct List<EtchRuntimeListener *, capu::Allocator<capu::GenericListNode<EtchRuntimeListener *>>, capu::Comparator> {
    CDUnknownFunctionPointerType *_field1;
    struct GenericListNode<EtchRuntimeListener *> _field2;
    unsigned int _field3;
    struct Comparator _field4;
    struct Allocator<capu::GenericListNode<EtchRuntimeListener *>> _field5;
};

struct List<const EtchObjectType *, capu::Allocator<capu::GenericListNode<const EtchObjectType *>>, capu::Comparator> {
    CDUnknownFunctionPointerType *_field1;
    struct GenericListNode<const EtchObjectType *> _field2;
    unsigned int _field3;
    struct Comparator _field4;
    struct Allocator<capu::GenericListNode<const EtchObjectType *>> _field5;
};

struct LocalFileManagerInterface {
    CDUnknownFunctionPointerType *_field1;
};

struct LogContext;

struct LogLevel;

struct LogMessageFilter {
    struct unordered_map<std::__1::basic_string<char>, unsigned int, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>> _field1;
    int _field2;
};

struct LogObserver {
    CDUnknownFunctionPointerType *_field1;
    struct LogMessageFilter _field2;
    _Bool _field3;
    id _field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field5;
};

struct Logger;

struct LoginCredentials {
    struct shared_ptr<spotify::accesspoint::LoginCredentials::Impl> _impl;
};

struct LoginOptions {
    _Bool _field1;
    _Bool _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field5;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field6;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field7;
    struct optional<spotify::core::experimental::session::options::ProxySettings> _field8;
};

struct MapMode;

struct MeMetadataRequest;

struct MessageToUserWrapper;

struct MetadataCache;

struct MetadataChangeBroadcaster;

struct MetadataChangeObserver;

struct MetadataHandler {
    CDUnknownFunctionPointerType *_field1;
};

struct MetadataInfo {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> title;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> artist;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> album_artist;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> album;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> composer;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> track_number;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> track_count;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> disc_number;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> disc_count;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> year;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> genre;
    int length;
    long long file_size;
    _Bool has_drm;
    _Bool is_valid;
    _Bool automatic_metadata;
    _Bool authoritative_length;
    int image_state;
};

struct MetadataTask {
    CDUnknownFunctionPointerType *_field1;
    struct SpRefCount _field2;
};

struct MftSequenceRules;

struct MultiStringHermesQuery {
    CDUnknownFunctionPointerType *_field1;
    struct error_code _field2;
    struct RefPtr<spotify::hermes::HermesMessage> _field3;
    struct RefPtr<spotify::hermes::HermesRequest> _field4;
    struct function<void (spotify::hermes::HermesQuery *)> _field5;
    _Bool _field6;
    _Bool _field7;
    struct vector<base::String, std::__1::allocator<base::String>> _field8;
    struct vector<base::String, std::__1::allocator<base::String>> _field9;
};

struct ObserverList<sp::SocialUserData, sp::SocialUserDataObserver> {
    struct WeakReferenceOwner _field1;
    struct Array<sp::SocialUserDataObserver *, sp::SocialUserDataObserver *const &, 64, true> _field2;
    unsigned int _field3;
    int _field4;
};

struct OfflineManagerApi {
    CDUnknownFunctionPointerType *_field1;
};

struct OfflineManagerObserverBridge {
    CDUnknownFunctionPointerType *_vptr$Observer;
    SPTOfflineManager *_objc;
};

struct OpaqueAUGraph;

struct OpaqueAudioComponentInstance;

struct OpenGraphPlaylistSyncer;

struct OpenGraphStarredPublisher;

struct Origin {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    struct SpotifyLink _field3;
};

struct PLCrashHostInfoVersion {
    unsigned int major;
    unsigned int minor;
    unsigned int revision;
};

struct PLCrashReporterCallbacks {
    unsigned short _field1;
    void *_field2;
    CDUnknownFunctionPointerType _field3;
};

struct PassRefPtr<sp::MetadataTask> {
    struct MetadataTask *_field1;
};

struct PassRefPtr<sp::Playlist> {
    struct Playlist *_field1;
};

struct Picture {
    struct ImageId _field1;
    int _field2;
    struct Size _field3;
};

struct PictureGroup {
    struct Array<sp::Picture, const sp::Picture &, 64, true> _field1;
};

struct PlacementNewable<sp::AlbumInfo::Show> {
    void *_field1[38];
};

struct PlacementNewable<sp::AlbumInfo::SpotifyAlbum> {
    void *_field1[35];
};

struct PlacementNewable<sp::TrackInfo::Episode> {
    void *_field1[88];
};

struct PlacementNewable<sp::TrackInfo::LocalTrack> {
    void *_field1[7];
};

struct PlacementNewable<sp::TrackInfo::PlaceholderTrack> {
    void *_field1[3];
};

struct PlacementNewable<sp::TrackInfo::SpotifyTrack> {
    void *_field1[42];
};

struct PlatformFactory {
    struct function<spotify::playback::AudioPlayer *(const char *, spotify::playback::AudioStats *)> _field1;
    struct function<spotify::playback::AudioDecompressor *(unsigned char *, unsigned int)> _field2;
};

struct PlayControlCommand;

struct PlayHistoryModel;

struct PlayOrigin {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> feature_identifier;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> feature_version;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> view_uri;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> external_referrer;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> device_identifier;
};

struct PlayQueue;

struct PlayQueueModel;

struct PlayTrackCommand;

struct PlayTrackCommandWrapper;

struct PlayedStateManager;

struct PlayerStack {
    shared_ptr_77186a83 player;
    struct shared_ptr<spotify::player::ProxyContextPlayer> proxy_player;
    struct shared_ptr<spotify::player::VolatileContextPlayer> volatile_player;
    shared_ptr_50593ca1 restorable;
    struct shared_ptr<spotify::player::prefetch::ContextPlayerPrefetcher> prefetcher;
    struct shared_ptr<spotify::player::SyncPlayQueue> play_queue;
    struct shared_ptr<spotify::player::ProxyPlayQueue> proxy_play_queue;
    shared_ptr_1ac160cb mft_sequence_rules;
    function_d41acad6 cosmos_routes;
    struct shared_ptr<void> mft_rules_configuration_observer;
};

struct Playlist {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
};

struct PlaylistBackendManager {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    struct WeakReferenceOwner _field3;
};

struct PlaylistContainer {
    CDUnknownFunctionPointerType *_field1;
    struct WeakReferenceOwner _field2;
    CDUnknownFunctionPointerType *_field3;
};

struct PlaylistContainerObserver;

struct PlaylistId {
    unsigned char _id[16];
};

struct PlaylistObserver;

struct PlaylistSyncReason {
    struct SpotifyLink _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
};

struct PlaylistTrackListContext {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct WeakReferenceOwner _field4;
    struct SpRefCount _field5;
    struct RefPtr<sp::TrackListContext::UserInfoDelegate> _field6;
    struct RefPtr<sp::MetadataChangeBroadcaster> _field7;
    struct RefPtr<sp::TrackListContext::ShuffleDelegate> _field8;
    struct TimerManager *_field9;
    struct shared_ptr<spotify::crypto::Random> _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    int _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    _Bool _field22;
    int _field23;
    int _field24;
    struct vector<unsigned int, std::__1::allocator<unsigned int>> _field25;
    struct vector<unsigned int, std::__1::allocator<unsigned int>> _field26;
    unsigned int _field27;
    unsigned int _field28;
    struct RefPtr<const sp::ArtistInfo> _field29;
    int _field30;
    int _field31;
    void *_field32;
    int _field33;
    struct Origin _field34;
    unsigned int _field35;
    int _field36;
    struct String _field37;
    struct TrackRefTargetStore _field38;
    struct unordered_map<spotify::uri::TrackId, base::String, boost::hash<spotify::uri::TrackId>, std::__1::equal_to<spotify::uri::TrackId>, std::__1::allocator<std::__1::pair<const spotify::uri::TrackId, base::String>>> _field39;
    int _field40;
    int _field41;
    struct ScopedObserver<sp::MetadataChangeBroadcaster, sp::MetadataChangeObserver> _field42;
    struct RefPtr<sp::TrackListContextFilter> _field43;
    unsigned int _field44;
    int _field45;
    int _field46;
    struct Timer *_field47;
    int _field48;
    unsigned int _field49;
    int _field50;
    unsigned int _field51;
    int _field52;
    _Bool _field53;
    struct function<bool (const sp::TrackInfo *const &, const sp::TrackInfo *const &)> _field54;
    _Bool _field55;
    struct TrackListContextNotifier _field56;
};

struct PopcountObjC;

struct PrefStore;

struct Prefs {
    struct scoped_ptr<base::PrefStore> _field1;
    struct signal<void (base::PrefEntry *), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (base::PrefEntry *)>, boost::function<void (const boost::signals2::connection &, base::PrefEntry *)>, boost::signals2::mutex> _field2;
    _Bool _field3;
};

struct PreparePlayOptions {
    struct optional<std::__1::basic_string<char>> _field1;
    struct optional<boost::variant<spotify::player::NumericContextIndex, spotify::player::StringContextIndex, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>> _field2;
    struct optional<boost::chrono::duration<long long, boost::ratio<1, 1000>>> _field3;
    _Bool _field4;
    _Bool _field5;
    struct ContextPlayerOptionOverrides _field6;
    struct Suppressions _field7;
    int _field8;
};

struct PresenceManager;

struct ProductState;

struct ProxyContextPlayer;

struct ProxyPlayQueue;

struct RHMIMetaData;

struct RHMIResourceType;

struct Random;

struct RefPtr<base_sp::internal::WeakReference::Flag> {
    struct Flag *_field1;
};

struct RefPtr<const sp::AlbumInfo> {
    struct AlbumInfo *_p;
};

struct RefPtr<const sp::ArtistInfo> {
    struct ArtistInfo *_p;
};

struct RefPtr<const sp::TrackInfo> {
    struct TrackInfo *_p;
};

struct RefPtr<sp::AlbumInfo> {
    struct AlbumInfo *_field1;
};

struct RefPtr<sp::ArtistInfo> {
    struct ArtistInfo *_field1;
};

struct RefPtr<sp::CoreTime> {
    struct CoreTime *_field1;
};

struct RefPtr<sp::FolderContext> {
    struct FolderContext *_p;
};

struct RefPtr<sp::MetadataChangeBroadcaster> {
    struct MetadataChangeBroadcaster *_field1;
};

struct RefPtr<sp::PlayHistoryModel> {
    struct PlayHistoryModel *_p;
};

struct RefPtr<sp::PlayQueueModel> {
    struct PlayQueueModel *_p;
};

struct RefPtr<sp::Playlist> {
    struct Playlist *_p;
};

struct RefPtr<sp::PlaylistContainer> {
    struct PlaylistContainer *_p;
};

struct RefPtr<sp::PlaylistTrackListContext> {
    struct PlaylistTrackListContext *_p;
};

struct RefPtr<sp::SocialUserData> {
    struct SocialUserData *_p;
};

struct RefPtr<sp::TrackListContext::ShuffleDelegate> {
    struct ShuffleDelegate *_field1;
};

struct RefPtr<sp::TrackListContext::UserInfoDelegate> {
    struct UserInfoDelegate *_field1;
};

struct RefPtr<sp::TrackListContext> {
    struct TrackListContext *_p;
};

struct RefPtr<sp::TrackListContextFilter> {
    struct TrackListContextFilter *_p;
};

struct RefPtr<sp::TrackListLoader> {
    struct TrackListLoader *_p;
};

struct RefPtr<spotify::hermes::HermesMessage> {
    struct HermesMessage *_field1;
};

struct RefPtr<spotify::hermes::HermesRequest> {
    struct HermesRequest *_field1;
};

struct RefPtr<spotify::http::Http> {
    struct Http *_field1;
};

struct RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>> {
    struct ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *> *_field1;
};

struct RefPtr<spotify::item_list::TrackListFactory> {
    struct TrackListFactory *_p;
};

struct RefPtr<spotify::lookup::CoreLookups> {
    struct CoreLookups *_p;
};

struct RemoteBMWRemotingServer {
    CDUnknownFunctionPointerType *_field1;
    struct EtchRuntime *_field2;
    struct EtchDeliveryService *_field3;
    struct EtchValueFactory *_field4;
    struct EtchStack *_field5;
    CDUnknownFunctionPointerType *_field6;
    struct EtchInt32 _field7;
    struct EtchInt32 _field8;
    struct EtchRuntime *_field9;
    CDUnknownFunctionPointerType *_field10;
    CDUnknownFunctionPointerType *_field11;
    struct EtchInt32 _field12;
    struct EtchInt32 _field13;
};

struct Request {
    struct shared_ptr<spotify::api::Request::Impl> _field1;
};

struct RequestAccounting;

struct Response {
    struct shared_ptr<spotify::api::Response::Impl> _field1;
};

struct ResponseHandler {
    id _field1;
    struct UnboundRevocable<base::RevocableStore> _field2;
};

struct Restorable;

struct Router;

struct RouterSharedContext;

struct RoutingTableEntry {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    int _field2;
    int _field3;
    int _field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field5;
};

struct SPApHermesRequestCpp {
    SPApHermesRequest *objc;
};

struct SPCollectionModelCallbacks {
    SPCollectionController *_objc;
};

struct SPCollectionModelObserver {
    SPCollectionController *_objc;
    struct scoped_connection _artists_list_observer;
    struct scoped_connection _all_albums_list_observer;
    struct scoped_connection _artist_albums_list_observer;
};

struct SPCollectionOfflineHelperBridge;

struct SPCoreCallbacks {
    SPCore *_objc;
};

struct SPItemListInterface;

struct SPPlaylistCallbacks {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    id _field3;
    id _field4;
    char _field5;
};

struct SPPlaylistContainerCallbacks {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
};

struct SPTGaiaDeviceManagerFactoryProducts {
    SPTGaiaDeviceManager *device_manager;
    int router_token;
    shared_ptr_fdeba099 gaia_channel_resolver_cpp;
    struct spotify_resolver *gaia_channel_resolver;
};

struct SPTIconCharacterSet {
    union {
        struct {
            unsigned short _field1;
            unsigned short _field2;
            unsigned short _field3;
        } _field1;
        unsigned short _field2[3];
    } _field1;
};

struct SPTPersistentRecordHeaderType {
    unsigned int magic;
    unsigned int headerSize;
    unsigned int refCount;
    unsigned int reserved1;
    unsigned long long ttl;
    unsigned long long updateTimeSec;
    unsigned long long payloadSizeBytes;
    unsigned long long reserved2;
    unsigned int reserved3;
    unsigned int reserved4;
    unsigned int flags;
    unsigned int crc;
};

struct SPTPlaylistHolder;

struct SPTTelcoActivationPrerequisites {
    Class _field1;
};

struct SPTVideoSeekSummary {
    int _field1;
    double _field2;
    int _field3;
    double _field4;
};

struct SPUserCallbacks {
    CDUnknownFunctionPointerType *_vptr$Observer;
    SPUser *_user;
};

struct Scheduler;

struct ScopedObserver<sp::MetadataChangeBroadcaster, sp::MetadataChangeObserver> {
    struct RefPtr<sp::MetadataChangeBroadcaster> _field1;
    struct MetadataChangeObserver *_field2;
};

struct ScopedObserver<sp::SocialUserData, sp::SocialUserDataObserver>;

struct ScopedObserverList<sp::Playlist, sp::PlaylistObserver> {
    struct PlaylistObserver *_field1;
    struct unordered_map<sp::Playlist *, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::Playlist, sp::PlaylistObserver>>, boost::hash<sp::Playlist *>, std::__1::equal_to<sp::Playlist *>, std::__1::allocator<std::__1::pair<sp::Playlist *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::Playlist, sp::PlaylistObserver>>>>> _field2;
};

struct ScopedObserverList<sp::PlaylistContainer, sp::PlaylistContainerObserver> {
    struct PlaylistContainerObserver *_field1;
    struct unordered_map<sp::PlaylistContainer *, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::PlaylistContainer, sp::PlaylistContainerObserver>>, boost::hash<sp::PlaylistContainer *>, std::__1::equal_to<sp::PlaylistContainer *>, std::__1::allocator<std::__1::pair<sp::PlaylistContainer *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::PlaylistContainer, sp::PlaylistContainerObserver>>>>> _field2;
};

struct ScopedObserverList<spotify::collection::Collection, spotify::collection::CollectionObserver> {
    struct CollectionObserver *_field1;
    struct unordered_map<spotify::collection::Collection *, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<spotify::collection::Collection, spotify::collection::CollectionObserver>>, boost::hash<spotify::collection::Collection *>, std::__1::equal_to<spotify::collection::Collection *>, std::__1::allocator<std::__1::pair<spotify::collection::Collection *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<spotify::collection::Collection, spotify::collection::CollectionObserver>>>>> _field2;
};

struct ScopedPlaylistObserverList {
    CDUnknownFunctionPointerType *_field1;
    struct ScopedObserverList<sp::Playlist, sp::PlaylistObserver> _field2;
    struct ScopedObserverList<sp::PlaylistContainer, sp::PlaylistContainerObserver> _field3;
    struct ScopedObserverList<sp::PlaylistContainer, sp::PlaylistContainerObserver> _field4;
};

struct Session {
    CDUnknownFunctionPointerType *_field1;
};

struct ShowId {
    unsigned char _id[16];
};

struct ShuffleDelegate;

struct Size {
    int _field1;
    int _field2;
};

struct SizedLruCache<base::String, base::RefPtr<sp::SnapshotCacheData>, spotify::tl::SizedLruCacheIncrementPolicy> {
    struct list<base::String, std::__1::allocator<base::String>> _field1;
    struct unordered_map<base::String, std::__1::pair<base::RefPtr<sp::SnapshotCacheData>, std::__1::__list_iterator<base::String, void *>>, boost::hash<base::String>, std::__1::equal_to<base::String>, std::__1::allocator<std::__1::pair<const base::String, std::__1::pair<base::RefPtr<sp::SnapshotCacheData>, std::__1::__list_iterator<base::String, void *>>>>> _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
};

struct SmartPointer<EtchAsyncResult<EtchBool>> {
    struct EtchAsyncResult<EtchBool> *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchAsyncResult<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject>>, EtchObjectHash>>> {
    struct EtchAsyncResult<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject>>, EtchObjectHash>> *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchAsyncResult<EtchInt32>> {
    struct EtchAsyncResult<EtchInt32> *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchAsyncResult<EtchNativeArray<signed char>>> {
    struct EtchAsyncResult<EtchNativeArray<signed char>> *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchAsyncResult<EtchObject>> {
    struct EtchAsyncResult<EtchObject> *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchAsyncResult<EtchString>> {
    struct EtchAsyncResult<EtchString> *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchAsyncResult<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo>> {
    struct EtchAsyncResult<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo> *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchAsyncResultNone> {
    struct EtchAsyncResultNone *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchBool> {
    struct EtchBool *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchByte> {
    struct EtchByte *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchException> {
    struct EtchException *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject>>, EtchObjectHash>> {
    struct EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject>>, EtchObjectHash> *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchInt32> {
    struct EtchInt32 *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchNativeArray<capu::SmartPointer<EtchObject>>> {
    struct EtchNativeArray<capu::SmartPointer<EtchObject>> *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchNativeArray<signed char>> {
    struct EtchNativeArray<signed char> *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchObject> {
    struct EtchObject *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchShort> {
    struct EtchShort *_field1;
    unsigned int *_field2;
};

struct SmartPointer<EtchString> {
    struct EtchString *_field1;
    unsigned int *_field2;
};

struct SmartPointer<de_bmw_idrive_BMWRemoting::AVConnectionType> {
    struct AVConnectionType *_field1;
    unsigned int *_field2;
};

struct SmartPointer<de_bmw_idrive_BMWRemoting::AVPlayerState> {
    struct AVPlayerState *_field1;
    unsigned int *_field2;
};

struct SmartPointer<de_bmw_idrive_BMWRemoting::BMWRemoting::RHMIMetaData> {
    struct RHMIMetaData *_field1;
    unsigned int *_field2;
};

struct SmartPointer<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo> {
    struct VersionInfo *_field1;
    unsigned int *_field2;
};

struct SmartPointer<de_bmw_idrive_BMWRemoting::LogLevel> {
    struct LogLevel *_field1;
    unsigned int *_field2;
};

struct SmartPointer<de_bmw_idrive_BMWRemoting::MapMode> {
    struct MapMode *_field1;
    unsigned int *_field2;
};

struct SmartPointer<de_bmw_idrive_BMWRemoting::RHMIResourceType> {
    struct RHMIResourceType *_field1;
    unsigned int *_field2;
};

struct SmartPointer<de_bmw_idrive_BMWRemoting::VoicePriorityType> {
    struct VoicePriorityType *_field1;
    unsigned int *_field2;
};

struct SocialLookupObjC;

struct SocialManager {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct WeakReferenceOwner _field3;
    unsigned char _field4;
    unsigned char _field5;
    struct ApHandler *_field6;
    struct scoped_connection _field7;
    struct shared_ptr<sp::FacebookService> _field8;
    struct scoped_ptr<sp::PresenceManager> _field9;
    struct unordered_map<std::__1::basic_string<char>, base::RefPtr<sp::SocialUserData>, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, base::RefPtr<sp::SocialUserData>>>> _field10;
    _Bool _field11;
    struct Array<sp::SocialManagerListener *, sp::SocialManagerListener *const &, 64, true> _field12;
    _Bool _field13;
    _Bool _field14;
    struct vector<base::String, std::__1::allocator<base::String>> _field15;
    struct vector<base::String, std::__1::allocator<base::String>> _field16;
    struct Array<boost::function<void (const std::__1::vector<base::String, std::__1::allocator<base::String>>&)>, const boost::function<void (const std::__1::vector<base::String, std::__1::allocator<base::String>>&)>&, 64, true> _field17;
    struct Array<boost::function<void (const std::__1::vector<base::String, std::__1::allocator<base::String>>&)>, const boost::function<void (const std::__1::vector<base::String, std::__1::allocator<base::String>>&)>&, 64, true> _field18;
    struct Array<sp::UserListCollector *, sp::UserListCollector *const &, 64, true> _field19;
    struct SizedLruCache<base::String, base::RefPtr<sp::SnapshotCacheData>, spotify::tl::SizedLruCacheIncrementPolicy> _field20;
    struct SizedLruCache<base::String, base::RefPtr<sp::SnapshotCacheData>, spotify::tl::SizedLruCacheIncrementPolicy> _field21;
    struct unordered_map<std::__1::basic_string<char>, sp::SocialManager::Count, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, sp::SocialManager::Count>>> _field22;
    struct unordered_map<std::__1::basic_string<char>, sp::SocialManager::Count, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, sp::SocialManager::Count>>> _field23;
    struct unordered_map<std::__1::basic_string<char>, sp::SocialUserDecorationData, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, sp::SocialUserDecorationData>>> _field24;
    struct Timer _field25;
    struct scoped_ptr<social_manager_format::SocialManagerFile> _field26;
    int _field27;
    struct Session *_field28;
    _Bool _field29;
    unsigned int _field30;
    _Bool _field31;
    struct Array<spotify::tl::ScopedObserver<sp::SocialUserData, sp::SocialUserDataObserver>, const spotify::tl::ScopedObserver<sp::SocialUserData, sp::SocialUserDataObserver>&, 64, true> _field32;
};

struct SocialManagerFile;

struct SocialManagerListener;

struct SocialManagerObserver {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct SocialUserData {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    struct WeakReferenceOwner _field3;
    struct SpRefCount _field4;
    struct ObserverList<sp::SocialUserData, sp::SocialUserDataObserver> _field5;
    struct String _field6;
    struct SocialUserDecorationData _field7;
    _Bool _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    unsigned int _field16;
    int _field17;
    struct SocialUserRelationship _field18;
    struct SocialUserRelationship _field19;
    int _field20;
    int _field21;
};

struct SocialUserDataObserver;

struct SocialUserDecorationData {
    struct String _field1;
    struct String _field2;
    struct String _field3;
    struct String _field4;
    struct String _field5;
    struct String _field6;
    struct String _field7;
    _Bool _field8;
    _Bool _field9;
};

struct SocialUserRelationship {
    int _field1;
};

struct SoundBufEnt;

struct SoundDriver {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
};

struct SoundDriverStats {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct SpRefCount {
    int _field1;
};

struct SpinLock {
    struct _opaque_pthread_mutex_t _field1;
};

struct SpotifyLink {
    int _what;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _target;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> _arguments;
    unsigned int _start_offs;
    unsigned int _disc_number;
    int _track_action;
    int _profile_section;
    union {
        struct AlbumId _album;
        struct ArtistId _artist;
        struct TrackId _track;
        struct PlaylistId _playlist;
        int _internal_view;
        struct AdId _ad;
        unsigned int _radio_genres;
        unsigned int _login_delay;
        unsigned long long _uid;
        struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_version;
        int _length;
        struct ImageId _image;
        Array_d2b128ec *_mosaic_image_links;
        struct ShowId _show_id;
        struct EpisodeId _episode_id;
        struct {
            struct vector<spotify::uri::TrackId, std::__1::allocator<spotify::uri::TrackId>> *_track_set;
            int _track_set_nr;
        } ;
        struct {
            struct FileId _file;
            int _format;
        } ;
        struct {
            int _toplist_type;
            unsigned int _toplist_region;
        } ;
        int _collection_bucket;
    } ;
};

struct StorageSystem {
    CDUnknownFunctionPointerType *_field1;
};

struct Store;

struct StrPtrStruct;

struct String {
    union {
        char *_field1;
        struct StrPtrStruct *_field2;
    } _field1;
};

struct Suppressions {
    struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field1;
};

struct SyncManagerApi {
    CDUnknownFunctionPointerType *_field1;
};

struct SyncManagerApiObserver {
    id _field1;
};

struct SyncPlayQueue;

struct SyncProgressInfo {
    int _field1;
    unsigned long long _field2;
    int _field3;
    unsigned long long _field4;
    int _field5;
    unsigned long long _field6;
    int _field7;
    int _field8;
    int _field9;
    _Bool _field10;
};

struct TPMRemotePlayer;

struct Timer {
    CDUnknownFunctionPointerType *_field1;
    struct TimerManager *_field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    struct function<void ()> _field4;
    unsigned int _field5;
    unsigned int _field6;
    struct TrackedLocation _field7;
    struct Mutex {
        struct _opaque_pthread_mutex_t _field1;
    } _field8;
};

struct TimerManager;

struct TrackContextObserverProxy {
    id _field1;
};

struct TrackId {
    unsigned char _id[16];
};

struct TrackInfo {
    CDUnknownFunctionPointerType *_field1;
    struct SpRefCount _field2;
    unsigned int _field3;
    struct RefPtr<sp::AlbumInfo> _field4;
    struct RefPtr<sp::ArtistInfo> _field5;
    unsigned char _field6;
    unsigned char _field7;
    unsigned char _field8;
    unsigned char _field9;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :2;
    unsigned int :3;
    unsigned int :2;
    unsigned int :3;
    unsigned int :1;
    unsigned int :1;
    unsigned int :2;
    unsigned int :2;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    int _field10;
    struct TrackInfo *_field11;
    struct TrackInfo *_field12;
    struct scoped_array<base::RefPtr<sp::ArtistInfo>> _field13;
    struct String _field14;
    union {
        struct PlacementNewable<sp::TrackInfo::SpotifyTrack> _field1;
        struct PlacementNewable<sp::TrackInfo::LocalTrack> _field2;
        struct PlacementNewable<sp::TrackInfo::PlaceholderTrack> _field3;
        struct PlacementNewable<sp::TrackInfo::Episode> _field4;
    } _field15;
};

struct TrackListContext {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct WeakReferenceOwner _field4;
    struct SpRefCount _field5;
    struct RefPtr<sp::TrackListContext::UserInfoDelegate> _field6;
    struct RefPtr<sp::MetadataChangeBroadcaster> _field7;
    struct RefPtr<sp::TrackListContext::ShuffleDelegate> _field8;
    struct TimerManager *_field9;
    struct shared_ptr<spotify::crypto::Random> _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    int _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    _Bool _field22;
    int _field23;
    int _field24;
    struct vector<unsigned int, std::__1::allocator<unsigned int>> _field25;
    struct vector<unsigned int, std::__1::allocator<unsigned int>> _field26;
    unsigned int _field27;
    unsigned int _field28;
    struct RefPtr<const sp::ArtistInfo> _field29;
    int _field30;
    int _field31;
    void *_field32;
    int _field33;
    struct Origin _field34;
    unsigned int _field35;
    int _field36;
    struct String _field37;
    struct TrackRefTargetStore _field38;
    struct unordered_map<spotify::uri::TrackId, base::String, boost::hash<spotify::uri::TrackId>, std::__1::equal_to<spotify::uri::TrackId>, std::__1::allocator<std::__1::pair<const spotify::uri::TrackId, base::String>>> _field39;
    int _field40;
    int _field41;
    struct ScopedObserver<sp::MetadataChangeBroadcaster, sp::MetadataChangeObserver> _field42;
    struct RefPtr<sp::TrackListContextFilter> _field43;
    unsigned int _field44;
    int _field45;
    int _field46;
    struct Timer *_field47;
    int _field48;
    unsigned int _field49;
    int _field50;
    unsigned int _field51;
    int _field52;
    _Bool _field53;
    struct function<bool (const sp::TrackInfo *const &, const sp::TrackInfo *const &)> _field54;
    _Bool _field55;
    struct TrackListContextNotifier _field56;
};

struct TrackListContextFilter;

struct TrackListContextNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct TrackListContext *_field2;
    unsigned int _field3;
    unsigned int _field4;
    struct signal<void (sp::TrackListContext *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackListContext *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackListContext *, unsigned int)>, boost::signals2::mutex> _field5;
};

struct TrackListFactory;

struct TrackListLoader;

struct TrackRef;

struct TrackRefTargetStore {
    CDUnknownFunctionPointerType *_field1;
    struct Array<sp::TrackRef *, sp::TrackRef *const &, 64, true> _field2;
};

struct TrackedLocation;

struct UIEdgeInsets {
    float top;
    float left;
    float bottom;
    float right;
};

struct UIOffset {
    float horizontal;
    float vertical;
};

struct UnboundRevocable<base::RevocableStore> {
    struct shared_ptr<base::RevocableStore::Store> _store_ref;
};

struct UnionTrackListItem;

struct UrlComponents {
    struct String _field1;
    struct String _field2;
    int _field3;
    _Bool _field4;
    _Bool _field5;
};

struct UserInfoDelegate;

struct UserListCollector;

struct VersionInfo {
    unsigned int _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
};

struct VoicePriorityType;

struct VolatileContextPlayer;

struct WeakPtr<sp::SocialManager> {
    struct WeakReference _field1;
    struct SocialManager *_field2;
};

struct WeakReference {
    struct RefPtr<base_sp::internal::WeakReference::Flag> _field1;
};

struct WeakReferenceOwner {
    struct Flag *_field1;
};

struct _Crashlytics__CustomAttribute;

struct _Crashlytics__InternalData;

struct _Crashlytics__Session {
    struct _ProtobufCMessage _field1;
    char *_field2;
    struct _ProtobufCBinaryData _field3;
    unsigned long long _field4;
    int _field5;
    unsigned long long _field6;
    int _field7;
    int _field8;
    int _field9;
    unsigned int _field10;
    int _field11;
    int _field12;
    int _field13;
    int _field14;
    struct _Crashlytics__InternalData *_field15;
    struct _Crashlytics__Session__User *_field16;
    struct _Crashlytics__Session__Application *_field17;
    struct _Crashlytics__Session__OperatingSystem *_field18;
    struct _Crashlytics__Session__Device *_field19;
    unsigned int _field20;
    struct _Crashlytics__Session__Event **_field21;
};

struct _Crashlytics__Session__Application {
    struct _ProtobufCMessage _field1;
    char *_field2;
    char *_field3;
    char *_field4;
    char *_field5;
    char *_field6;
    char *_field7;
    char *_field8;
    int _field9;
    int _field10;
    struct _Crashlytics__Session__Application__Process *_field11;
    struct _Crashlytics__Session__Application__Organization *_field12;
};

struct _Crashlytics__Session__Application__Organization;

struct _Crashlytics__Session__Application__Process;

struct _Crashlytics__Session__Device {
    struct _ProtobufCMessage _field1;
    int _field2;
    struct _ProtobufCBinaryData _field3;
    int _field4;
    struct _ProtobufCBinaryData _field5;
    int _field6;
    char *_field7;
    int _field8;
    unsigned int _field9;
    int _field10;
    unsigned long long _field11;
    int _field12;
    unsigned long long _field13;
    char *_field14;
    char *_field15;
    int _field16;
    int _field17;
    unsigned int _field18;
    struct _Crashlytics__Session__Device__Identifier **_field19;
    int _field20;
    unsigned int _field21;
    char *_field22;
    char *_field23;
};

struct _Crashlytics__Session__Device__Identifier;

struct _Crashlytics__Session__Event {
    struct _ProtobufCMessage _field1;
    unsigned long long _field2;
    char *_field3;
    char *_field4;
    struct _Crashlytics__Session__Event__Application *_field5;
    struct _Crashlytics__Session__Event__OperatingSystem *_field6;
    struct _Crashlytics__Session__Event__Device *_field7;
    struct _Crashlytics__Session__Event__Log *_field8;
};

struct _Crashlytics__Session__Event__Application;

struct _Crashlytics__Session__Event__Device;

struct _Crashlytics__Session__Event__Log;

struct _Crashlytics__Session__Event__OperatingSystem;

struct _Crashlytics__Session__OperatingSystem {
    struct _ProtobufCMessage _field1;
    int _field2;
    char *_field3;
    char *_field4;
    int _field5;
    int _field6;
};

struct _Crashlytics__Session__User {
    struct _ProtobufCMessage _field1;
    char *_field2;
    char *_field3;
    char *_field4;
    unsigned int _field5;
    struct _Crashlytics__CustomAttribute **_field6;
};

struct _NSRange {
    unsigned int location;
    unsigned int length;
};

struct _PLCrashReportDecoder {
    struct _Plcrash__CrashReport *_field1;
};

struct _Plcrash__CrashReport {
    struct _ProtobufCMessage _field1;
    struct _Plcrash__CrashReport__SystemInfo *_field2;
    struct _Plcrash__CrashReport__ApplicationInfo *_field3;
    unsigned int _field4;
    struct _Plcrash__CrashReport__Thread **_field5;
    unsigned int _field6;
    struct _Plcrash__CrashReport__BinaryImage **_field7;
    struct _Plcrash__CrashReport__Exception *_field8;
    struct _Plcrash__CrashReport__Signal *_field9;
    struct _Plcrash__CrashReport__ProcessInfo *_field10;
    struct _Plcrash__CrashReport__MachineInfo *_field11;
    struct _Plcrash__CrashReport__ReportInfo *_field12;
};

struct _Plcrash__CrashReport__ApplicationInfo {
    struct _ProtobufCMessage _field1;
    char *_field2;
    char *_field3;
};

struct _Plcrash__CrashReport__BinaryImage;

struct _Plcrash__CrashReport__Exception {
    struct _ProtobufCMessage _field1;
    char *_field2;
    char *_field3;
    unsigned int _field4;
    struct _Plcrash__CrashReport__Thread__StackFrame **_field5;
};

struct _Plcrash__CrashReport__MachineInfo {
    struct _ProtobufCMessage _field1;
    char *_field2;
    struct _Plcrash__CrashReport__Processor *_field3;
    unsigned int _field4;
    unsigned int _field5;
};

struct _Plcrash__CrashReport__ProcessInfo {
    struct _ProtobufCMessage _field1;
    char *_field2;
    unsigned int _field3;
    char *_field4;
    char *_field5;
    unsigned int _field6;
    int _field7;
    int _field8;
    unsigned long long _field9;
};

struct _Plcrash__CrashReport__Processor {
    struct _ProtobufCMessage _field1;
    int _field2;
    int _field3;
    unsigned long long _field4;
    unsigned long long _field5;
};

struct _Plcrash__CrashReport__ReportInfo;

struct _Plcrash__CrashReport__Signal {
    struct _ProtobufCMessage _field1;
    char *_field2;
    char *_field3;
    unsigned long long _field4;
    struct _Plcrash__CrashReport__Signal__MachException *_field5;
};

struct _Plcrash__CrashReport__Signal__MachException {
    struct _ProtobufCMessage _field1;
    unsigned long long _field2;
    unsigned int _field3;
    unsigned long long *_field4;
};

struct _Plcrash__CrashReport__Symbol {
    struct _ProtobufCMessage _field1;
    char *_field2;
    unsigned long long _field3;
    int _field4;
    unsigned long long _field5;
};

struct _Plcrash__CrashReport__SystemInfo {
    struct _ProtobufCMessage _field1;
    int _field2;
    int _field3;
    char *_field4;
    int _field5;
    long long _field6;
    char *_field7;
};

struct _Plcrash__CrashReport__Thread;

struct _Plcrash__CrashReport__Thread__StackFrame {
    struct _ProtobufCMessage _field1;
    unsigned long long _field2;
    struct _Plcrash__CrashReport__Symbol *_field3;
};

struct _ProtobufCBinaryData {
    unsigned int _field1;
    char *_field2;
};

struct _ProtobufCMessage {
    struct _ProtobufCMessageDescriptor *_field1;
    unsigned int _field2;
    struct _ProtobufCMessageUnknownField *_field3;
};

struct _ProtobufCMessageDescriptor;

struct _ProtobufCMessageUnknownField;

struct _SPTNewMusicTuesdayNormalizedRange {
    float location;
    float length;
};

struct __list_node<base::String, void *>;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *_field1;
};

struct _opaque_pthread_cond_t {
    long _field1;
    char _field2[24];
};

struct _opaque_pthread_mutex_t {
    long _field1;
    char _field2[40];
};

struct _xmlDoc {
    void *_field1;
    int _field2;
    char *_field3;
    struct _xmlNode *_field4;
    struct _xmlNode *_field5;
    struct _xmlNode *_field6;
    struct _xmlNode *_field7;
    struct _xmlNode *_field8;
    struct _xmlDoc *_field9;
    int _field10;
    int _field11;
    struct _xmlDtd *_field12;
    struct _xmlDtd *_field13;
    struct _xmlNs *_field14;
    char *_field15;
    char *_field16;
    void *_field17;
    void *_field18;
    char *_field19;
    int _field20;
    struct _xmlDict *_field21;
    void *_field22;
    int _field23;
    int _field24;
};

struct _xmlDtd;

struct _xmlNode {
    void *_field1;
    int _field2;
    char *_field3;
    struct _xmlNode *_field4;
    struct _xmlNode *_field5;
    struct _xmlNode *_field6;
    struct _xmlNode *_field7;
    struct _xmlNode *_field8;
    struct _xmlDoc *_field9;
    struct _xmlNs *_field10;
    char *_field11;
    struct _xmlAttr *_field12;
    struct _xmlNs *_field13;
    void *_field14;
    unsigned short _field15;
    unsigned short _field16;
};

struct _xmlNs;

struct a4;

struct aligned_storage<36, 4> {
    union data_t {
        char _field1[36];
        struct a4 _field2;
    } _field1;
};

struct aligned_storage<bool> {
    union dummy_u {
        char _field1[1];
        char _field2;
    } _field1;
};

struct aligned_storage<boost::chrono::duration<long long, boost::ratio<1, 1000>>> {
    union dummy_u {
        char _field1[8];
        struct a4 _field2;
    } _field1;
};

struct aligned_storage<boost::variant<spotify::player::NumericContextIndex, spotify::player::StringContextIndex, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>> {
    union dummy_u {
        char _field1[40];
        struct a4 _field2;
    } _field1;
};

struct aligned_storage<spotify::ads::AdStreamRule> {
    union dummy_u {
        char _field1[8];
        struct a4 _field2;
    } _field1;
};

struct aligned_storage<spotify::core::experimental::session::options::ProxySettings> {
    union dummy_u {
        char _field1[44];
        struct a4 _field2;
    } _field1;
};

struct aligned_storage<std::__1::basic_string<char>> {
    union dummy_u {
        char _field1[12];
        struct a4 _field2;
    } _field1;
};

struct aligned_storage_imp<1, 1> {
    union data_t {
        char _field1[1];
        char _field2;
    } _field1;
};

struct array<unsigned char, 128> {
    unsigned char _field1[128];
};

struct array<unsigned char, 192> {
    unsigned char _field1[192];
};

struct array<unsigned char, 20> {
    unsigned char _field1[20];
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned int __cap_;
                    unsigned int __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[11];
                } __s;
                struct __raw {
                    unsigned long __words[3];
                } __r;
            } ;
        } __first_;
    } __r_;
};

struct bound_memfunc_ptr_t {
    void *memfunc_ptr__obj_ptr;
};

struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>>>>;

struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const base::String, std::__1::pair<base::RefPtr<sp::SnapshotCacheData>, std::__1::__list_iterator<base::String, void *>>>>>>;

struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const sp::TrackInfo *const, unsigned int>>>>;

struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const spotify::uri::SpotifyLink, spotify::collection::CollectionOfflineController::ListData>>>>;

struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const spotify::uri::SpotifyLink, std::__1::vector<base::String, std::__1::allocator<base::String>>>>>>;

struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const spotify::uri::TrackId, base::String>>>>;

struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const std::__1::basic_string<char>, base::RefPtr<sp::SocialUserData>>>>>;

struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const std::__1::basic_string<char>, sp::SocialManager::Count>>>>;

struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const std::__1::basic_string<char>, sp::SocialUserDecorationData>>>>;

struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>>;

struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>>>;

struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<sp::Playlist *const, int>>>>;

struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<sp::Playlist *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::Playlist, sp::PlaylistObserver>>>>>>;

struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<sp::PlaylistContainer *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::PlaylistContainer, sp::PlaylistContainerObserver>>>>>>;

struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<spotify::collection::Collection *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<spotify::collection::Collection, spotify::collection::CollectionObserver>>>>>>;

struct connection_body_base;

struct error_category;

struct error_code {
    int _field1;
    struct error_category *_field2;
};

struct function<bool (const sp::TrackInfo *const &, const sp::TrackInfo *const &)> {
    struct vtable_base *_field1;
    union function_buffer _field2;
};

struct function<boost::chrono::time_point<boost::chrono::system_clock, boost::chrono::duration<long long, boost::ratio<1, 1000000000>>>()> {
    struct vtable_base *vtable;
    union function_buffer functor;
};

struct function<boost::shared_ptr<void>(const spotify::cosmos::Request &, const boost::function<void (const spotify::cosmos::Response &)>&)> {
    struct vtable_base *vtable;
    union function_buffer functor;
};

struct function<spotify::playback::AudioDecompressor *(unsigned char *, unsigned int)> {
    struct vtable_base *_field1;
    union function_buffer _field2;
};

struct function<spotify::playback::AudioPlayer *(const char *, spotify::playback::AudioStats *)> {
    struct vtable_base *_field1;
    union function_buffer _field2;
};

struct function<spotify::playback::SoundDriver *()> {
    struct vtable_base *_field1;
    union function_buffer _field2;
};

struct function<std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>>(const spotify::player::PlayOptions &)> {
    struct vtable_base *vtable;
    union function_buffer functor;
};

struct function<unsigned int ()> {
    struct vtable_base *_field1;
    union function_buffer _field2;
};

struct function<void ()> {
    struct vtable_base *_field1;
    union function_buffer _field2;
};

struct function<void (const std::__1::vector<base::String, std::__1::allocator<base::String>>&)>;

struct function<void (spotify::hermes::HermesQuery *)> {
    struct vtable_base *_field1;
    union function_buffer _field2;
};

struct function<void (spotify::http::HttpConnection *)> {
    struct vtable_base *_field1;
    union function_buffer _field2;
};

struct function<void (spotify_resolver *)> {
    struct vtable_base *vtable;
    union function_buffer functor;
};

struct ifaddrs {
    struct ifaddrs *_field1;
    char *_field2;
    unsigned int _field3;
    struct sockaddr *_field4;
    struct sockaddr *_field5;
    struct sockaddr *_field6;
    void *_field7;
};

struct in_addr {
    unsigned int _field1;
};

struct list<base::String, std::__1::allocator<base::String>> {
    struct __list_node_base<base::String, void *> {
        struct __list_node<base::String, void *> *_field1;
        struct __list_node<base::String, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<base::String, void *>>> {
        unsigned long _field1;
    } _field2;
};

struct map<base::String, sp::FacebookService::FacebookErrorClass, std::__1::less<base::String>, std::__1::allocator<std::__1::pair<const base::String, sp::FacebookService::FacebookErrorClass>>> {
    struct __tree<std::__1::__value_type<base::String, sp::FacebookService::FacebookErrorClass>, std::__1::__map_value_compare<base::String, std::__1::__value_type<base::String, sp::FacebookService::FacebookErrorClass>, std::__1::less<base::String>, true>, std::__1::allocator<std::__1::__value_type<base::String, sp::FacebookService::FacebookErrorClass>>> {
        struct __tree_node<std::__1::__value_type<base::String, sp::FacebookService::FacebookErrorClass>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<base::String, sp::FacebookService::FacebookErrorClass>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<base::String, std::__1::__value_type<base::String, sp::FacebookService::FacebookErrorClass>, std::__1::less<base::String>, true>> {
            unsigned long _field1;
        } _field3;
    } _field1;
};

struct map<base::String, sp::ScrobblerErrorAction, std::__1::less<base::String>, std::__1::allocator<std::__1::pair<const base::String, sp::ScrobblerErrorAction>>> {
    struct __tree<std::__1::__value_type<base::String, sp::ScrobblerErrorAction>, std::__1::__map_value_compare<base::String, std::__1::__value_type<base::String, sp::ScrobblerErrorAction>, std::__1::less<base::String>, true>, std::__1::allocator<std::__1::__value_type<base::String, sp::ScrobblerErrorAction>>> {
        struct __tree_node<std::__1::__value_type<base::String, sp::ScrobblerErrorAction>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<base::String, sp::ScrobblerErrorAction>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<base::String, std::__1::__value_type<base::String, sp::ScrobblerErrorAction>, std::__1::less<base::String>, true>> {
            unsigned long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long _field1;
        } _field3;
    } _field1;
};

struct mutex {
    struct _opaque_pthread_mutex_t _field1;
};

struct obj_ref_t {
    void *obj_ptr;
    _Bool is_const_qualified;
    _Bool is_volatile_qualified;
};

struct optional<bool> {
    _Bool _field1;
    struct aligned_storage<bool> _field2;
};

struct optional<boost::chrono::duration<long long, boost::ratio<1, 1000>>> {
    _Bool _field1;
    struct aligned_storage<boost::chrono::duration<long long, boost::ratio<1, 1000>>> _field2;
};

struct optional<boost::variant<spotify::player::NumericContextIndex, spotify::player::StringContextIndex, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>> {
    _Bool _field1;
    struct aligned_storage<boost::variant<spotify::player::NumericContextIndex, spotify::player::StringContextIndex, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>> _field2;
};

struct optional<spotify::ads::AdStreamRule> {
    _Bool _field1;
    struct aligned_storage<spotify::ads::AdStreamRule> _field2;
};

struct optional<spotify::core::experimental::session::options::ProxySettings> {
    _Bool _field1;
    struct aligned_storage<spotify::core::experimental::session::options::ProxySettings> _field2;
};

struct optional<std::__1::basic_string<char>> {
    _Bool _field1;
    struct aligned_storage<std::__1::basic_string<char>> _field2;
};

struct plcrash_exception_server_context {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    CDUnknownFunctionPointerType _field5;
    void *_field6;
    struct _opaque_pthread_mutex_t _field7;
    struct _opaque_pthread_cond_t _field8;
    unsigned int _field9;
    _Bool _field10;
};

struct plcrash_mach_exception_port_set {
    unsigned int count;
    unsigned int masks[13];
    unsigned int ports[13];
    int behaviors[13];
    int flavors[13];
};

struct ptr_bucket;

struct scoped_array<base::RefPtr<sp::ArtistInfo>> {
    struct RefPtr<sp::ArtistInfo> *_field1;
};

struct scoped_connection {
    struct weak_ptr<boost::signals2::detail::connection_body_base> _weak_connection_body;
};

struct scoped_ptr<SPCollectionOfflineHelperBridge> {
    struct SPCollectionOfflineHelperBridge *px;
};

struct scoped_ptr<base::PrefStore> {
    struct PrefStore *_field1;
};

struct scoped_ptr<social_manager_format::SocialManagerFile> {
    struct SocialManagerFile *_field1;
};

struct scoped_ptr<sp::ConnectivityDataSource> {
    struct ConnectivityDataSource *_field1;
};

struct scoped_ptr<sp::OpenGraphPlaylistSyncer> {
    struct OpenGraphPlaylistSyncer *_field1;
};

struct scoped_ptr<sp::OpenGraphStarredPublisher> {
    struct OpenGraphStarredPublisher *_field1;
};

struct scoped_ptr<sp::PresenceManager> {
    struct PresenceManager *_field1;
};

struct scoped_ptr<sp::TPMRemotePlayer> {
    struct TPMRemotePlayer *px;
};

struct scoped_ptr<spotify::collection::CollectionFeatureContainer> {
    struct CollectionFeatureContainer *px;
};

struct scoped_ptr<spotify::core::experimental::scheduler::Scheduler> {
    struct Scheduler *px;
};

struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
        struct __tree_node<std::__1::basic_string<char>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char>>> {
            unsigned long _field1;
        } _field3;
    } _field1;
};

struct shared_count {
    struct sp_counted_base *pi_;
};

struct shared_ptr<SPItemListInterface> {
    struct SPItemListInterface *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<SPTPlaylistHolder> {
    struct SPTPlaylistHolder *px;
    struct shared_count pn;
};

struct shared_ptr<base::JobRunner<base::Job<spotify::item_list::Snapshot<base::RefPtr<spotify::item_list::TrackRow>>, spotify::item_list::ItemListInterface::ErrorType>>::Impl> {
    struct Impl *_field1;
    struct shared_count _field2;
};

struct shared_ptr<base::RevocableStore::Store> {
    struct Store *px;
    struct shared_count pn;
};

struct shared_ptr<boost::signals2::detail::signal_impl<void (), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void ()>, boost::function<void (const boost::signals2::connection &)>, boost::signals2::mutex>> {
    struct signal_impl<void (), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void ()>, boost::function<void (const boost::signals2::connection &)>, boost::signals2::mutex> *_field1;
    struct shared_count _field2;
};

struct shared_ptr<boost::signals2::detail::signal_impl<void (base::PrefEntry *), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (base::PrefEntry *)>, boost::function<void (const boost::signals2::connection &, base::PrefEntry *)>, boost::signals2::mutex>> {
    struct signal_impl<void (base::PrefEntry *), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (base::PrefEntry *)>, boost::function<void (const boost::signals2::connection &, base::PrefEntry *)>, boost::signals2::mutex> *_field1;
    struct shared_count _field2;
};

struct shared_ptr<boost::signals2::detail::signal_impl<void (const spotify::uri::SpotifyLink &, bool), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (const spotify::uri::SpotifyLink &, bool)>, boost::function<void (const boost::signals2::connection &, const spotify::uri::SpotifyLink &, bool)>, boost::signals2::mutex>> {
    struct signal_impl<void (const spotify::uri::SpotifyLink &, bool), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (const spotify::uri::SpotifyLink &, bool)>, boost::function<void (const boost::signals2::connection &, const spotify::uri::SpotifyLink &, bool)>, boost::signals2::mutex> *_field1;
    struct shared_count _field2;
};

struct shared_ptr<boost::signals2::detail::signal_impl<void (int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (int)>, boost::function<void (const boost::signals2::connection &, int)>, boost::signals2::mutex>> {
    struct signal_impl<void (int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (int)>, boost::function<void (const boost::signals2::connection &, int)>, boost::signals2::mutex> *_field1;
    struct shared_count _field2;
};

struct shared_ptr<boost::signals2::detail::signal_impl<void (sp::TrackListContext *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackListContext *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackListContext *, unsigned int)>, boost::signals2::mutex>> {
    struct signal_impl<void (sp::TrackListContext *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackListContext *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackListContext *, unsigned int)>, boost::signals2::mutex> *_field1;
    struct shared_count _field2;
};

struct shared_ptr<const spotify::connect::GaiaDeviceInterface> {
    struct GaiaDeviceInterface *_field1;
    struct shared_count _field2;
};

struct shared_ptr<sp::AdChooser> {
    struct AdChooser *px;
    struct shared_count pn;
};

struct shared_ptr<sp::FacebookPermissions> {
    struct FacebookPermissions *_field1;
    struct shared_count _field2;
};

struct shared_ptr<sp::FacebookPublisher> {
    struct FacebookPublisher *_field1;
    struct shared_count _field2;
};

struct shared_ptr<sp::FacebookScrobbler> {
    struct FacebookScrobbler *_field1;
    struct shared_count _field2;
};

struct shared_ptr<sp::FacebookService> {
    struct FacebookService *_field1;
    struct shared_count _field2;
};

struct shared_ptr<sp::FacebookServiceRequestFactory> {
    struct FacebookServiceRequestFactory *_field1;
    struct shared_count _field2;
};

struct shared_ptr<sp::FriendsMetadataRequest> {
    struct FriendsMetadataRequest *_field1;
    struct shared_count _field2;
};

struct shared_ptr<sp::MeMetadataRequest> {
    struct MeMetadataRequest *_field1;
    struct shared_count _field2;
};

struct shared_ptr<sp::MftSequenceRules> {
    struct MftSequenceRules *px;
    struct shared_count pn;
};

struct shared_ptr<sp::PlayTrackCommand> {
    struct PlayTrackCommand *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::accesspoint::LoginCredentials::Impl> {
    struct Impl *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::ads::AdManagerInterface> {
    struct AdManagerInterface *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::ads::AdsCore> {
    struct AdsCore *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::ads::LasertagClient> {
    struct LasertagClient *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::analytics::Logger> {
    struct Logger *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::analytics::RequestAccounting> {
    struct RequestAccounting *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::api::CResolverWrapper> {
    struct CResolverWrapper *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::api::Request::Impl> {
    struct Impl *_field1;
    struct shared_count _field2;
};

struct shared_ptr<spotify::api::Response::Impl> {
    struct Impl *_field1;
    struct shared_count _field2;
};

struct shared_ptr<spotify::api::Router> {
    struct Router *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::api::RouterSharedContext> {
    struct RouterSharedContext *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::collection::CollectionModel> {
    struct CollectionModel *_field1;
    struct shared_count _field2;
};

struct shared_ptr<spotify::collection::CollectionOfflineHelper> {
    struct CollectionOfflineHelper *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::collection::PlayedStateManager> {
    struct PlayedStateManager *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::connect::GaiaDeviceInterface> {
    struct GaiaDeviceInterface *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::connect::GaiaManagerInterface> {
    struct GaiaManagerInterface *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::core::experimental::product_state::ProductState> {
    struct ProductState *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::core::experimental::scheduler::Scheduler> {
    struct Scheduler *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::crypto::Random> {
    struct Random *_field1;
    struct shared_count _field2;
};

struct shared_ptr<spotify::player::ContextPlayer> {
    struct ContextPlayer *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::player::ContextPlayerRules> {
    struct ContextPlayerRules *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::player::ContextTrackMetadata> {
    struct ContextTrackMetadata *_field1;
    struct shared_count _field2;
};

struct shared_ptr<spotify::player::PlayQueue> {
    struct PlayQueue *_field1;
    struct shared_count _field2;
};

struct shared_ptr<spotify::player::ProxyContextPlayer> {
    struct ProxyContextPlayer *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::player::ProxyPlayQueue> {
    struct ProxyPlayQueue *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::player::Restorable> {
    struct Restorable *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::player::SyncPlayQueue> {
    struct SyncPlayQueue *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::player::VolatileContextPlayer> {
    struct VolatileContextPlayer *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::player::cosmos::LegacyCosmosContextPageLoader> {
    struct LegacyCosmosContextPageLoader *px;
    struct shared_count pn;
};

struct shared_ptr<spotify::player::prefetch::ContextPlayerPrefetcher> {
    struct ContextPlayerPrefetcher *px;
    struct shared_count pn;
};

struct shared_ptr<void> {
    void *px;
    struct shared_count pn;
};

struct signal<void (), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void ()>, boost::function<void (const boost::signals2::connection &)>, boost::signals2::mutex> {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<boost::signals2::detail::signal_impl<void (), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void ()>, boost::function<void (const boost::signals2::connection &)>, boost::signals2::mutex>> _field2;
};

struct signal<void (base::PrefEntry *), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (base::PrefEntry *)>, boost::function<void (const boost::signals2::connection &, base::PrefEntry *)>, boost::signals2::mutex> {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<boost::signals2::detail::signal_impl<void (base::PrefEntry *), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (base::PrefEntry *)>, boost::function<void (const boost::signals2::connection &, base::PrefEntry *)>, boost::signals2::mutex>> _field2;
};

struct signal<void (const spotify::uri::SpotifyLink &, bool), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (const spotify::uri::SpotifyLink &, bool)>, boost::function<void (const boost::signals2::connection &, const spotify::uri::SpotifyLink &, bool)>, boost::signals2::mutex> {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<boost::signals2::detail::signal_impl<void (const spotify::uri::SpotifyLink &, bool), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (const spotify::uri::SpotifyLink &, bool)>, boost::function<void (const boost::signals2::connection &, const spotify::uri::SpotifyLink &, bool)>, boost::signals2::mutex>> _field2;
};

struct signal<void (int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (int)>, boost::function<void (const boost::signals2::connection &, int)>, boost::signals2::mutex> {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<boost::signals2::detail::signal_impl<void (int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (int)>, boost::function<void (const boost::signals2::connection &, int)>, boost::signals2::mutex>> _field2;
};

struct signal<void (sp::TrackListContext *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackListContext *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackListContext *, unsigned int)>, boost::signals2::mutex> {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<boost::signals2::detail::signal_impl<void (sp::TrackListContext *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackListContext *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackListContext *, unsigned int)>, boost::signals2::mutex>> _field2;
};

struct signal_impl<void (), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void ()>, boost::function<void (const boost::signals2::connection &)>, boost::signals2::mutex>;

struct signal_impl<void (base::PrefEntry *), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (base::PrefEntry *)>, boost::function<void (const boost::signals2::connection &, base::PrefEntry *)>, boost::signals2::mutex>;

struct signal_impl<void (const spotify::uri::SpotifyLink &, bool), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (const spotify::uri::SpotifyLink &, bool)>, boost::function<void (const boost::signals2::connection &, const spotify::uri::SpotifyLink &, bool)>, boost::signals2::mutex>;

struct signal_impl<void (int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (int)>, boost::function<void (const boost::signals2::connection &, int)>, boost::signals2::mutex>;

struct signal_impl<void (sp::TrackListContext *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackListContext *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackListContext *, unsigned int)>, boost::signals2::mutex>;

struct sockaddr {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[14];
};

struct sockaddr_in {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    struct in_addr _field4;
    char _field5[8];
};

struct sp_counted_base;

struct spotify_resolver {
    char *_field1;
    CDUnknownFunctionPointerType _field2;
    void *_field3;
};

struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const base::String, std::__1::pair<base::RefPtr<sp::SnapshotCacheData>, std::__1::__list_iterator<base::String, void *>>>>, base::String, std::__1::pair<base::RefPtr<sp::SnapshotCacheData>, std::__1::__list_iterator<base::String, void *>>, boost::hash<base::String>, std::__1::equal_to<base::String>>> {
    _Bool _field1;
    struct aligned_storage_imp<1, 1> _field2[2];
    struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const base::String, std::__1::pair<base::RefPtr<sp::SnapshotCacheData>, std::__1::__list_iterator<base::String, void *>>>>>> _field3;
    unsigned long _field4;
    unsigned long _field5;
    float _field6;
    unsigned long _field7;
    struct ptr_bucket *_field8;
};

struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const sp::TrackInfo *const, unsigned int>>, const sp::TrackInfo *, unsigned int, boost::hash<const sp::TrackInfo *>, std::__1::equal_to<const sp::TrackInfo *>>> {
    _Bool _field1;
    struct aligned_storage_imp<1, 1> _field2[2];
    struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const sp::TrackInfo *const, unsigned int>>>> _field3;
    unsigned long _field4;
    unsigned long _field5;
    float _field6;
    unsigned long _field7;
    struct ptr_bucket *_field8;
};

struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const spotify::uri::SpotifyLink, spotify::collection::CollectionOfflineController::ListData>>, spotify::uri::SpotifyLink, spotify::collection::CollectionOfflineController::ListData, boost::hash<spotify::uri::SpotifyLink>, std::__1::equal_to<spotify::uri::SpotifyLink>>> {
    _Bool _field1;
    struct aligned_storage_imp<1, 1> _field2[2];
    struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const spotify::uri::SpotifyLink, spotify::collection::CollectionOfflineController::ListData>>>> _field3;
    unsigned long _field4;
    unsigned long _field5;
    float _field6;
    unsigned long _field7;
    struct ptr_bucket *_field8;
};

struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const spotify::uri::SpotifyLink, std::__1::vector<base::String, std::__1::allocator<base::String>>>>, spotify::uri::SpotifyLink, std::__1::vector<base::String, std::__1::allocator<base::String>>, boost::hash<spotify::uri::SpotifyLink>, std::__1::equal_to<spotify::uri::SpotifyLink>>> {
    _Bool _field1;
    struct aligned_storage_imp<1, 1> _field2[2];
    struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const spotify::uri::SpotifyLink, std::__1::vector<base::String, std::__1::allocator<base::String>>>>>> _field3;
    unsigned long _field4;
    unsigned long _field5;
    float _field6;
    unsigned long _field7;
    struct ptr_bucket *_field8;
};

struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const spotify::uri::TrackId, base::String>>, spotify::uri::TrackId, base::String, boost::hash<spotify::uri::TrackId>, std::__1::equal_to<spotify::uri::TrackId>>> {
    _Bool _field1;
    struct aligned_storage_imp<1, 1> _field2[2];
    struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const spotify::uri::TrackId, base::String>>>> _field3;
    unsigned long _field4;
    unsigned long _field5;
    float _field6;
    unsigned long _field7;
    struct ptr_bucket *_field8;
};

struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, base::RefPtr<sp::SocialUserData>>>, std::__1::basic_string<char>, base::RefPtr<sp::SocialUserData>, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>>> {
    _Bool _field1;
    struct aligned_storage_imp<1, 1> _field2[2];
    struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const std::__1::basic_string<char>, base::RefPtr<sp::SocialUserData>>>>> _field3;
    unsigned long _field4;
    unsigned long _field5;
    float _field6;
    unsigned long _field7;
    struct ptr_bucket *_field8;
};

struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, sp::SocialManager::Count>>, std::__1::basic_string<char>, sp::SocialManager::Count, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>>> {
    _Bool _field1;
    struct aligned_storage_imp<1, 1> _field2[2];
    struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const std::__1::basic_string<char>, sp::SocialManager::Count>>>> _field3;
    unsigned long _field4;
    unsigned long _field5;
    float _field6;
    unsigned long _field7;
    struct ptr_bucket *_field8;
};

struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, sp::SocialUserDecorationData>>, std::__1::basic_string<char>, sp::SocialUserDecorationData, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>>> {
    _Bool _field1;
    struct aligned_storage_imp<1, 1> _field2[2];
    struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const std::__1::basic_string<char>, sp::SocialUserDecorationData>>>> _field3;
    unsigned long _field4;
    unsigned long _field5;
    float _field6;
    unsigned long _field7;
    struct ptr_bucket *_field8;
};

struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>, std::__1::basic_string<char>, std::__1::basic_string<char>, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>>> {
    _Bool _field1;
    struct aligned_storage_imp<1, 1> _field2[2];
    struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>> _field3;
    unsigned long _field4;
    unsigned long _field5;
    float _field6;
    unsigned long _field7;
    struct ptr_bucket *_field8;
};

struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>, std::__1::basic_string<char>, unsigned int, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>>> {
    _Bool _field1;
    struct aligned_storage_imp<1, 1> _field2[2];
    struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>>> _field3;
    unsigned long _field4;
    unsigned long _field5;
    float _field6;
    unsigned long _field7;
    struct ptr_bucket *_field8;
};

struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<sp::Playlist *const, int>>, sp::Playlist *, int, boost::hash<sp::Playlist *>, std::__1::equal_to<sp::Playlist *>>> {
    _Bool _field1;
    struct aligned_storage_imp<1, 1> _field2[2];
    struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<sp::Playlist *const, int>>>> _field3;
    unsigned long _field4;
    unsigned long _field5;
    float _field6;
    unsigned long _field7;
    struct ptr_bucket *_field8;
};

struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<sp::Playlist *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::Playlist, sp::PlaylistObserver>>>>, sp::Playlist *, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::Playlist, sp::PlaylistObserver>>, boost::hash<sp::Playlist *>, std::__1::equal_to<sp::Playlist *>>> {
    _Bool _field1;
    struct aligned_storage_imp<1, 1> _field2[2];
    struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<sp::Playlist *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::Playlist, sp::PlaylistObserver>>>>>> _field3;
    unsigned long _field4;
    unsigned long _field5;
    float _field6;
    unsigned long _field7;
    struct ptr_bucket *_field8;
};

struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<sp::PlaylistContainer *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::PlaylistContainer, sp::PlaylistContainerObserver>>>>, sp::PlaylistContainer *, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::PlaylistContainer, sp::PlaylistContainerObserver>>, boost::hash<sp::PlaylistContainer *>, std::__1::equal_to<sp::PlaylistContainer *>>> {
    _Bool _field1;
    struct aligned_storage_imp<1, 1> _field2[2];
    struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<sp::PlaylistContainer *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::PlaylistContainer, sp::PlaylistContainerObserver>>>>>> _field3;
    unsigned long _field4;
    unsigned long _field5;
    float _field6;
    unsigned long _field7;
    struct ptr_bucket *_field8;
};

struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<spotify::collection::Collection *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<spotify::collection::Collection, spotify::collection::CollectionObserver>>>>, spotify::collection::Collection *, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<spotify::collection::Collection, spotify::collection::CollectionObserver>>, boost::hash<spotify::collection::Collection *>, std::__1::equal_to<spotify::collection::Collection *>>> {
    _Bool _field1;
    struct aligned_storage_imp<1, 1> _field2[2];
    struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<std::__1::pair<spotify::collection::Collection *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<spotify::collection::Collection, spotify::collection::CollectionObserver>>>>>> _field3;
    unsigned long _field4;
    unsigned long _field5;
    float _field6;
    unsigned long _field7;
    struct ptr_bucket *_field8;
};

struct table_impl<boost::unordered::detail::set<std::__1::allocator<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>>, base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>, boost::hash<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>>, std::__1::equal_to<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>>>> {
    _Bool _field1;
    struct aligned_storage_imp<1, 1> _field2[2];
    struct compressed<std::__1::allocator<boost::unordered::detail::ptr_bucket>, std::__1::allocator<boost::unordered::detail::ptr_node<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>>>> _field3;
    unsigned long _field4;
    unsigned long _field5;
    float _field6;
    unsigned long _field7;
    struct ptr_bucket *_field8;
};

struct timeval {
    int tv_sec;
    int tv_usec;
};

struct type_info;

struct type_t {
    struct type_info *type;
    _Bool const_qualified;
    _Bool volatile_qualified;
};

struct unique_ptr<PopcountObjC, std::__1::default_delete<PopcountObjC>> {
    struct __compressed_pair<PopcountObjC *, std::__1::default_delete<PopcountObjC>> {
        struct PopcountObjC *__first_;
    } __ptr_;
};

struct unique_ptr<SocialLookupObjC, std::__1::default_delete<SocialLookupObjC>> {
    struct __compressed_pair<SocialLookupObjC *, std::__1::default_delete<SocialLookupObjC>> {
        struct SocialLookupObjC *__first_;
    } __ptr_;
};

struct unordered_map<base::String, std::__1::pair<base::RefPtr<sp::SnapshotCacheData>, std::__1::__list_iterator<base::String, void *>>, boost::hash<base::String>, std::__1::equal_to<base::String>, std::__1::allocator<std::__1::pair<const base::String, std::__1::pair<base::RefPtr<sp::SnapshotCacheData>, std::__1::__list_iterator<base::String, void *>>>>> {
    struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const base::String, std::__1::pair<base::RefPtr<sp::SnapshotCacheData>, std::__1::__list_iterator<base::String, void *>>>>, base::String, std::__1::pair<base::RefPtr<sp::SnapshotCacheData>, std::__1::__list_iterator<base::String, void *>>, boost::hash<base::String>, std::__1::equal_to<base::String>>> _field1;
};

struct unordered_map<const sp::TrackInfo *, unsigned int, boost::hash<const sp::TrackInfo *>, std::__1::equal_to<const sp::TrackInfo *>, std::__1::allocator<std::__1::pair<const sp::TrackInfo *const, unsigned int>>> {
    struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const sp::TrackInfo *const, unsigned int>>, const sp::TrackInfo *, unsigned int, boost::hash<const sp::TrackInfo *>, std::__1::equal_to<const sp::TrackInfo *>>> _field1;
};

struct unordered_map<sp::Playlist *, int, boost::hash<sp::Playlist *>, std::__1::equal_to<sp::Playlist *>, std::__1::allocator<std::__1::pair<sp::Playlist *const, int>>> {
    struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<sp::Playlist *const, int>>, sp::Playlist *, int, boost::hash<sp::Playlist *>, std::__1::equal_to<sp::Playlist *>>> _field1;
};

struct unordered_map<sp::Playlist *, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::Playlist, sp::PlaylistObserver>>, boost::hash<sp::Playlist *>, std::__1::equal_to<sp::Playlist *>, std::__1::allocator<std::__1::pair<sp::Playlist *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::Playlist, sp::PlaylistObserver>>>>> {
    struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<sp::Playlist *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::Playlist, sp::PlaylistObserver>>>>, sp::Playlist *, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::Playlist, sp::PlaylistObserver>>, boost::hash<sp::Playlist *>, std::__1::equal_to<sp::Playlist *>>> _field1;
};

struct unordered_map<sp::PlaylistContainer *, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::PlaylistContainer, sp::PlaylistContainerObserver>>, boost::hash<sp::PlaylistContainer *>, std::__1::equal_to<sp::PlaylistContainer *>, std::__1::allocator<std::__1::pair<sp::PlaylistContainer *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::PlaylistContainer, sp::PlaylistContainerObserver>>>>> {
    struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<sp::PlaylistContainer *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::PlaylistContainer, sp::PlaylistContainerObserver>>>>, sp::PlaylistContainer *, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<sp::PlaylistContainer, sp::PlaylistContainerObserver>>, boost::hash<sp::PlaylistContainer *>, std::__1::equal_to<sp::PlaylistContainer *>>> _field1;
};

struct unordered_map<spotify::collection::Collection *, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<spotify::collection::Collection, spotify::collection::CollectionObserver>>, boost::hash<spotify::collection::Collection *>, std::__1::equal_to<spotify::collection::Collection *>, std::__1::allocator<std::__1::pair<spotify::collection::Collection *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<spotify::collection::Collection, spotify::collection::CollectionObserver>>>>> {
    struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<spotify::collection::Collection *const, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<spotify::collection::Collection, spotify::collection::CollectionObserver>>>>, spotify::collection::Collection *, spotify::tl::detail::ScopedObserverListNotifyCount<spotify::tl::ScopedObserver<spotify::collection::Collection, spotify::collection::CollectionObserver>>, boost::hash<spotify::collection::Collection *>, std::__1::equal_to<spotify::collection::Collection *>>> _field1;
};

struct unordered_map<spotify::uri::SpotifyLink, spotify::collection::CollectionOfflineController::ListData, boost::hash<spotify::uri::SpotifyLink>, std::__1::equal_to<spotify::uri::SpotifyLink>, std::__1::allocator<std::__1::pair<const spotify::uri::SpotifyLink, spotify::collection::CollectionOfflineController::ListData>>> {
    struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const spotify::uri::SpotifyLink, spotify::collection::CollectionOfflineController::ListData>>, spotify::uri::SpotifyLink, spotify::collection::CollectionOfflineController::ListData, boost::hash<spotify::uri::SpotifyLink>, std::__1::equal_to<spotify::uri::SpotifyLink>>> _field1;
};

struct unordered_map<spotify::uri::SpotifyLink, std::__1::vector<base::String, std::__1::allocator<base::String>>, boost::hash<spotify::uri::SpotifyLink>, std::__1::equal_to<spotify::uri::SpotifyLink>, std::__1::allocator<std::__1::pair<const spotify::uri::SpotifyLink, std::__1::vector<base::String, std::__1::allocator<base::String>>>>> {
    struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const spotify::uri::SpotifyLink, std::__1::vector<base::String, std::__1::allocator<base::String>>>>, spotify::uri::SpotifyLink, std::__1::vector<base::String, std::__1::allocator<base::String>>, boost::hash<spotify::uri::SpotifyLink>, std::__1::equal_to<spotify::uri::SpotifyLink>>> _field1;
};

struct unordered_map<spotify::uri::TrackId, base::String, boost::hash<spotify::uri::TrackId>, std::__1::equal_to<spotify::uri::TrackId>, std::__1::allocator<std::__1::pair<const spotify::uri::TrackId, base::String>>> {
    struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const spotify::uri::TrackId, base::String>>, spotify::uri::TrackId, base::String, boost::hash<spotify::uri::TrackId>, std::__1::equal_to<spotify::uri::TrackId>>> _field1;
};

struct unordered_map<std::__1::basic_string<char>, base::RefPtr<sp::SocialUserData>, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, base::RefPtr<sp::SocialUserData>>>> {
    struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, base::RefPtr<sp::SocialUserData>>>, std::__1::basic_string<char>, base::RefPtr<sp::SocialUserData>, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>>> _field1;
};

struct unordered_map<std::__1::basic_string<char>, sp::SocialManager::Count, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, sp::SocialManager::Count>>> {
    struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, sp::SocialManager::Count>>, std::__1::basic_string<char>, sp::SocialManager::Count, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>>> _field1;
};

struct unordered_map<std::__1::basic_string<char>, sp::SocialUserDecorationData, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, sp::SocialUserDecorationData>>> {
    struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, sp::SocialUserDecorationData>>, std::__1::basic_string<char>, sp::SocialUserDecorationData, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>>> _field1;
};

struct unordered_map<std::__1::basic_string<char>, std::__1::basic_string<char>, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
    struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>, std::__1::basic_string<char>, std::__1::basic_string<char>, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>>> _field1;
};

struct unordered_map<std::__1::basic_string<char>, unsigned int, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>> {
    struct table_impl<boost::unordered::detail::map<std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>, std::__1::basic_string<char>, unsigned int, boost::hash<std::string>, std::__1::equal_to<std::__1::basic_string<char>>>> _field1;
};

struct unordered_set<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>, boost::hash<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>>, std::__1::equal_to<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>>, std::__1::allocator<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>>> {
    struct table_impl<boost::unordered::detail::set<std::__1::allocator<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>>, base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>, boost::hash<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>>, std::__1::equal_to<base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>>>>> _field1;
};

struct variant<spotify::player::NumericContextIndex, spotify::player::StringContextIndex, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> {
    int _field1;
    struct aligned_storage<36, 4> _field2;
};

struct vector<base::String, std::__1::allocator<base::String>> {
    struct String *_field1;
    struct String *_field2;
    struct __compressed_pair<base::String *, std::__1::allocator<base::String>> {
        struct String *_field1;
    } _field3;
};

struct vector<long, std::__1::allocator<long>> {
    long *__begin_;
    long *__end_;
    struct __compressed_pair<long *, std::__1::allocator<long>> {
        long *__first_;
    } __end_cap_;
};

struct vector<spotify::uri::SpotifyLink, std::__1::allocator<spotify::uri::SpotifyLink>> {
    struct SpotifyLink *_field1;
    struct SpotifyLink *_field2;
    struct __compressed_pair<spotify::uri::SpotifyLink *, std::__1::allocator<spotify::uri::SpotifyLink>> {
        struct SpotifyLink *_field1;
    } _field3;
};

struct vector<spotify::uri::TrackId, std::__1::allocator<spotify::uri::TrackId>>;

struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *__begin_;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *__end_;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *__first_;
    } __end_cap_;
};

struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *_field1;
    } _field3;
};

struct vtable_base;

struct weak_count {
    struct sp_counted_base *pi_;
};

struct weak_ptr<boost::signals2::detail::connection_body_base> {
    struct connection_body_base *px;
    struct weak_count pn;
};

struct weak_ptr<sp::FacebookService> {
    struct FacebookService *_field1;
    struct weak_count _field2;
};

struct weak_ptr<spotify::analytics::RequestAccounting> {
    struct RequestAccounting *_field1;
    struct weak_count _field2;
};

#if 0
// Names with conflicting types:
typedef struct {
    struct _opaque_pthread_mutex_t _field1;
    struct _opaque_pthread_mutexattr_t {
        long _field1;
        char _field2[8];
    } _field2;
} Mutex_9adbd200;

typedef struct {
    struct _opaque_pthread_mutex_t _field1;
} Mutex_e78f009e;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long _field1;
    id *_field2;
    unsigned long *_field3;
    unsigned long _field4[5];
} CDStruct_11f37819;

typedef struct {
    char _field1;
    unsigned char _field2;
    char _field3;
    unsigned long long _field4;
} CDStruct_c6e275e6;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
} CDStruct_39925896;

typedef struct {
    double latitude;
    double longitude;
} CDStruct_2c43369c;

typedef struct {
    int _field1;
    int _field2;
    char *_field3;
    _Bool _field4;
    char *_field5;
    _Bool _field6;
} CDStruct_9c005df8;

typedef struct {
    int _field1;
    int _field2;
} CDStruct_1ef3fb1f;

typedef struct {
    long long _field1;
    int _field2;
    unsigned int _field3;
    long long _field4;
} CDStruct_198678f7;

typedef struct CDStruct_183601bc;

typedef struct {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    CDStruct_183601bc *_field3;
} CDStruct_a6175b54;

typedef struct {
    struct String *_field1;
} CDStruct_e8a31fef;

typedef struct {
    CDStruct_198678f7 _field1;
    CDStruct_198678f7 _field2;
} CDStruct_3c1748cc;

typedef struct {
    struct CGSize _field1;
    float _field2;
} CDStruct_dea03362;

typedef struct {
    CDStruct_dea03362 _field1;
    CDStruct_dea03362 _field2;
    CDStruct_dea03362 _field3;
    CDStruct_dea03362 _field4;
    CDStruct_dea03362 _field5;
} CDStruct_8e9c49ae;

// Template types
typedef struct Array<sp::AlbumGroup, const sp::AlbumGroup &, 64, true> {
    struct AlbumGroup *_field1;
    unsigned int _field2;
    unsigned int _field3;
} Array_3df85c80;

typedef struct Array<spotify::uri::SpotifyLink, const spotify::uri::SpotifyLink &, 64, true> {
    struct SpotifyLink *_field1;
    unsigned int _field2;
    unsigned int _field3;
} Array_d2b128ec;

typedef struct AsArray<const spotify::uri::SpotifyLink> {
    struct SpotifyLink *_field1;
    unsigned int _field2;
} AsArray_ed8d0598;

typedef struct AsArray<spotify::collection::CollectionListItem<const sp::ArtistInfo *>> {
    struct CollectionListItem<const sp::ArtistInfo *> *_field1;
    unsigned int _field2;
} AsArray_c317e958;

typedef struct PassRefPtr<sp::MetadataTask> {
    struct MetadataTask *_field1;
} PassRefPtr_dc5781f5;

typedef struct PassRefPtr<sp::Playlist> {
    struct Playlist *_field1;
} PassRefPtr_687b826e;

typedef struct RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *>> {
    struct ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *> *_field1;
} RefPtr_d4435df0;

typedef struct SmartPointer<EtchAsyncResult<EtchBool>> {
    struct EtchAsyncResult<EtchBool> *_field1;
    unsigned int *_field2;
} SmartPointer_2990cae4;

typedef struct SmartPointer<EtchAsyncResult<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject>>, EtchObjectHash>>> {
    struct EtchAsyncResult<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject>>, EtchObjectHash>> *_field1;
    unsigned int *_field2;
} SmartPointer_eeb2e2f7;

typedef struct SmartPointer<EtchAsyncResult<EtchInt32>> {
    struct EtchAsyncResult<EtchInt32> *_field1;
    unsigned int *_field2;
} SmartPointer_b24293cc;

typedef struct SmartPointer<EtchAsyncResult<EtchNativeArray<signed char>>> {
    struct EtchAsyncResult<EtchNativeArray<signed char>> *_field1;
    unsigned int *_field2;
} SmartPointer_9495c61d;

typedef struct SmartPointer<EtchAsyncResult<EtchObject>> {
    struct EtchAsyncResult<EtchObject> *_field1;
    unsigned int *_field2;
} SmartPointer_e48105ec;

typedef struct SmartPointer<EtchAsyncResult<EtchString>> {
    struct EtchAsyncResult<EtchString> *_field1;
    unsigned int *_field2;
} SmartPointer_e050184f;

typedef struct SmartPointer<EtchAsyncResult<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo>> {
    struct EtchAsyncResult<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo> *_field1;
    unsigned int *_field2;
} SmartPointer_40adefbb;

typedef struct SmartPointer<EtchAsyncResultNone> {
    struct EtchAsyncResultNone *_field1;
    unsigned int *_field2;
} SmartPointer_e248625f;

typedef struct SmartPointer<EtchBool> {
    struct EtchBool *_field1;
    unsigned int *_field2;
} SmartPointer_41e81a6d;

typedef struct SmartPointer<EtchByte> {
    struct EtchByte *_field1;
    unsigned int *_field2;
} SmartPointer_3d2ef9e4;

typedef struct SmartPointer<EtchException> {
    struct EtchException *_field1;
    unsigned int *_field2;
} SmartPointer_749f70b3;

typedef struct SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject>>, EtchObjectHash>> {
    struct EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject>>, EtchObjectHash> *_field1;
    unsigned int *_field2;
} SmartPointer_0ad8884d;

typedef struct SmartPointer<EtchInt32> {
    struct EtchInt32 *_field1;
    unsigned int *_field2;
} SmartPointer_327c0c77;

typedef struct SmartPointer<EtchNativeArray<capu::SmartPointer<EtchObject>>> {
    struct EtchNativeArray<capu::SmartPointer<EtchObject>> *_field1;
    unsigned int *_field2;
} SmartPointer_486f98c6;

typedef struct SmartPointer<EtchNativeArray<signed char>> {
    struct EtchNativeArray<signed char> *_field1;
    unsigned int *_field2;
} SmartPointer_5942b2ab;

typedef struct SmartPointer<EtchObject> {
    struct EtchObject *_field1;
    unsigned int *_field2;
} SmartPointer_19daed9d;

typedef struct SmartPointer<EtchShort> {
    struct EtchShort *_field1;
    unsigned int *_field2;
} SmartPointer_2cdceac8;

typedef struct SmartPointer<EtchString> {
    struct EtchString *_field1;
    unsigned int *_field2;
} SmartPointer_d4feb5b0;

typedef struct SmartPointer<de_bmw_idrive_BMWRemoting::AVConnectionType> {
    struct AVConnectionType *_field1;
    unsigned int *_field2;
} SmartPointer_8066eb6b;

typedef struct SmartPointer<de_bmw_idrive_BMWRemoting::AVPlayerState> {
    struct AVPlayerState *_field1;
    unsigned int *_field2;
} SmartPointer_d6a6d25b;

typedef struct SmartPointer<de_bmw_idrive_BMWRemoting::BMWRemoting::RHMIMetaData> {
    struct RHMIMetaData *_field1;
    unsigned int *_field2;
} SmartPointer_1a0550cc;

typedef struct SmartPointer<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo> {
    struct VersionInfo *_field1;
    unsigned int *_field2;
} SmartPointer_3dbef9e5;

typedef struct SmartPointer<de_bmw_idrive_BMWRemoting::LogLevel> {
    struct LogLevel *_field1;
    unsigned int *_field2;
} SmartPointer_cba8b065;

typedef struct SmartPointer<de_bmw_idrive_BMWRemoting::MapMode> {
    struct MapMode *_field1;
    unsigned int *_field2;
} SmartPointer_37069ba5;

typedef struct SmartPointer<de_bmw_idrive_BMWRemoting::RHMIResourceType> {
    struct RHMIResourceType *_field1;
    unsigned int *_field2;
} SmartPointer_8b0a02aa;

typedef struct SmartPointer<de_bmw_idrive_BMWRemoting::VoicePriorityType> {
    struct VoicePriorityType *_field1;
    unsigned int *_field2;
} SmartPointer_a7691bac;

typedef struct function<boost::chrono::time_point<boost::chrono::system_clock, boost::chrono::duration<long long, boost::ratio<1, 1000000000>>>()> {
    struct vtable_base *vtable;
    union function_buffer functor;
} function_9e590c62;

typedef struct function<boost::shared_ptr<void>(const spotify::cosmos::Request &, const boost::function<void (const spotify::cosmos::Response &)>&)> {
    struct vtable_base *vtable;
    union function_buffer functor;
} function_d41acad6;

typedef struct function<std::__1::set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>>(const spotify::player::PlayOptions &)> {
    struct vtable_base *vtable;
    union function_buffer functor;
} function_33d49389;

typedef struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long _field1;
        } _field3;
    } _field1;
} map_5b152b35;

typedef struct scoped_ptr<sp::TPMRemotePlayer> {
    struct TPMRemotePlayer *px;
} scoped_ptr_33d823b1;

typedef struct shared_ptr<SPItemListInterface> {
    struct SPItemListInterface *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c0019588;

typedef struct shared_ptr<const spotify::connect::GaiaDeviceInterface> {
    struct GaiaDeviceInterface *_field1;
    struct shared_count _field2;
} shared_ptr_7f295b16;

typedef struct shared_ptr<sp::MftSequenceRules> {
    struct MftSequenceRules *px;
    struct shared_count pn;
} shared_ptr_1ac160cb;

typedef struct shared_ptr<sp::PlayTrackCommand> {
    struct PlayTrackCommand *px;
    struct shared_count pn;
} shared_ptr_a2ba27af;

typedef struct shared_ptr<spotify::ads::AdManagerInterface> {
    struct AdManagerInterface *px;
    struct shared_count pn;
} shared_ptr_bd238df9;

typedef struct shared_ptr<spotify::ads::LasertagClient> {
    struct LasertagClient *px;
    struct shared_count pn;
} shared_ptr_6432a44d;

typedef struct shared_ptr<spotify::analytics::Logger> {
    struct Logger *px;
    struct shared_count pn;
} shared_ptr_d1d137b5;

typedef struct shared_ptr<spotify::api::CResolverWrapper> {
    struct CResolverWrapper *px;
    struct shared_count pn;
} shared_ptr_fdeba099;

typedef struct shared_ptr<spotify::api::Router> {
    struct Router *px;
    struct shared_count pn;
} shared_ptr_5b14cbed;

typedef struct shared_ptr<spotify::api::RouterSharedContext> {
    struct RouterSharedContext *px;
    struct shared_count pn;
} shared_ptr_ed16716c;

typedef struct shared_ptr<spotify::collection::CollectionModel> {
    struct CollectionModel *_field1;
    struct shared_count _field2;
} shared_ptr_3053ad6d;

typedef struct shared_ptr<spotify::collection::PlayedStateManager> {
    struct PlayedStateManager *px;
    struct shared_count pn;
} shared_ptr_88056c72;

typedef struct shared_ptr<spotify::connect::GaiaDeviceInterface> {
    struct GaiaDeviceInterface *px;
    struct shared_count pn;
} shared_ptr_6857e0ac;

typedef struct shared_ptr<spotify::connect::GaiaManagerInterface> {
    struct GaiaManagerInterface *px;
    struct shared_count pn;
} shared_ptr_e32bc916;

typedef struct shared_ptr<spotify::core::experimental::product_state::ProductState> {
    struct ProductState *px;
    struct shared_count pn;
} shared_ptr_57e1d63c;

typedef struct shared_ptr<spotify::core::experimental::scheduler::Scheduler> {
    struct Scheduler *px;
    struct shared_count pn;
} shared_ptr_6519f712;

typedef struct shared_ptr<spotify::player::ContextPlayer> {
    struct ContextPlayer *px;
    struct shared_count pn;
} shared_ptr_77186a83;

typedef struct shared_ptr<spotify::player::ContextPlayerRules> {
    struct ContextPlayerRules *px;
    struct shared_count pn;
} shared_ptr_1591fdd9;

typedef struct shared_ptr<spotify::player::PlayQueue> {
    struct PlayQueue *_field1;
    struct shared_count _field2;
} shared_ptr_41d3aae7;

typedef struct shared_ptr<spotify::player::Restorable> {
    struct Restorable *px;
    struct shared_count pn;
} shared_ptr_50593ca1;

typedef struct variant<spotify::player::NumericContextIndex, spotify::player::StringContextIndex, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> {
    int _field1;
    struct aligned_storage<36, 4> _field2;
} variant_72a0f0a1;

typedef struct vector<spotify::uri::SpotifyLink, std::__1::allocator<spotify::uri::SpotifyLink>> {
    struct SpotifyLink *_field1;
    struct SpotifyLink *_field2;
    struct __compressed_pair<spotify::uri::SpotifyLink *, std::__1::allocator<spotify::uri::SpotifyLink>> {
        struct SpotifyLink *_field1;
    } _field3;
} vector_553ebee1;

#pragma mark Named Unions

union Data {
    struct {
        int _field1;
        int _field2;
        struct String *_field3;
    } _field1;
    CDStruct_e8a31fef _field2;
    CDStruct_e8a31fef _field3;
    struct {
        struct LoginCredentials *_field1;
    } _field4;
    struct MessageToUserWrapper *_field5;
    struct PlayTrackCommandWrapper *_field6;
    struct PlayControlCommand *_field7;
};

union function_buffer {
    void *obj_ptr;
    struct type_t type;
    CDUnknownFunctionPointerType func_ptr;
    struct bound_memfunc_ptr_t bound_memfunc_ptr;
    struct obj_ref_t obj_ref;
    char data;
};

