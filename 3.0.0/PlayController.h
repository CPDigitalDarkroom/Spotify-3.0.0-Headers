//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "Player.h"
#import "SPSessionObserver.h"

@class NSObject<PlayableContextProtocol>, NSString, SPSession, SPTrackContext;

@interface PlayController : NSObject <SPSessionObserver, Player>
{
    struct scoped_connection _player_notifier_pre_change_connection;
    struct scoped_connection _player_notifier_change_connection;
    struct RefPtr<sp::PlayQueueModel> _playQueue;
    struct RefPtr<sp::PlayHistoryModel> _playHistory;
    struct RefPtr<sp::TrackListLoader> _trackListLoader;
    id <PlayControllerDelegate> _delegate;
    SPTrackContext *_playingContext;
    id <PlayerAudioSessionDelegate> _audioSessionDelegate;
    // Error parsing type: ^{TrackPlayerMgr=^^?^^?^^?^^?{WeakReferenceOwner=^{Flag}}^^?^^?B{TrackPlayerMgrNotifier=^^?^{TrackPlayerMgrInterface}{signal<void (sp::TrackPlayerMgrInterface *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackPlayerMgrInterface *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackPlayerMgrInterface *, unsigned int)>, boost::signals2::mutex>=^^?{shared_ptr<boost::signals2::detail::signal_impl<void (sp::TrackPlayerMgrInterface *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackPlayerMgrInterface *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackPlayerMgrInterface *, unsigned int)>, boost::signals2::mutex> >=^{signal_impl<void (sp::TrackPlayerMgrInterface *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackPlayerMgrInterface *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackPlayerMgrInterface *, unsigned int)>, boost::signals2::mutex>}{shared_count=^{sp_counted_base}}}}{signal<void (sp::TrackPlayerMgrInterface *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackPlayerMgrInterface *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackPlayerMgrInterface *, unsigned int)>, boost::signals2::mutex>=^^?{shared_ptr<boost::signals2::detail::signal_impl<void (sp::TrackPlayerMgrInterface *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackPlayerMgrInterface *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackPlayerMgrInterface *, unsigned int)>, boost::signals2::mutex> >=^{signal_impl<void (sp::TrackPlayerMgrInterface *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackPlayerMgrInterface *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackPlayerMgrInterface *, unsigned int)>, boost::signals2::mutex>}{shared_count=^{sp_counted_base}}}}Ii}{scoped_connection={weak_ptr<boost::signals2::detail::connection_body_base>=^{connection_body_base}{weak_count=^{sp_counted_base}}}}{TrackInfoWithRef={RefPtr<const sp::TrackInfo>=^{TrackInfo}}{TrackRef=^{TrackRefTarget}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BI}}{PlayOrigin={String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}B{String=(?=*^{StrPtrStruct})}}{TrackInfoWithRef={RefPtr<const sp::TrackInfo>=^{TrackInfo}}{TrackRef=^{TrackRefTarget}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BI}}{PlayOrigin={String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}B{String=(?=*^{StrPtrStruct})}}i{RefPtr<const sp::TrackInfo>=^{TrackInfo}}{RefPtr<sp::PlayQueueModel>=^{PlayQueueModel}}{scoped_connection={weak_ptr<boost::signals2::detail::connection_body_base>=^{connection_body_base}{weak_count=^{sp_counted_base}}}}{position=qI}BBBii{scoped_connection={weak_ptr<boost::signals2::detail::connection_body_base>=^{connection_body_base}{weak_count=^{sp_counted_base}}}}{scoped_connection={weak_ptr<boost::signals2::detail::connection_body_base>=^{connection_body_base}{weak_count=^{sp_counted_base}}}}{RefPtr<const sp::TrackInfo>=^{TrackInfo}}{shared_ptr<spotify::ads::AdManagerInterface>=^{AdManagerInterface}{shared_count=^{sp_counted_base}}}{RefPtr<sp::TrackListContext>=^{TrackListContext}}{RefPtr<sp::TrackListContext>=^{TrackListContext}}{RefPtr<sp::TrackListContext>=^{TrackListContext}}{scoped_connection={weak_ptr<boost::signals2::detail::connection_body_base>=^{connection_body_base}{weak_count=^{sp_counted_base}}}}{RefPtr<sp::PlayHistoryModel>=^{PlayHistoryModel}}{LocalTrackPlayabilityChecker=^^?BB{shared_ptr<sp::TpmRules>=^{TpmRules}{shared_count=^{sp_counted_base}}}{shared_ptr<sp::MftRules>=^{MftRules}{shared_count=^{sp_counted_base}}}{function<boost::chrono::duration<long long, boost::ratio<1, 1> > ()>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}{scoped_connection={weak_ptr<boost::signals2::detail::connection_body_base>=^{connection_body_base}{weak_count=^{sp_counted_base}}}}B{shared_ptr<sp::SessionStreamingRules>=^{SessionStreamingRules}{shared_count=^{sp_counted_base}}}}B{function<base::PassRefPtr<sp::TrackListTrackListContext> (const base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *> > &)>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}{Array<sp::SimpleTrackInfoWithRef, const sp::SimpleTrackInfoWithRef &, 64, true>=^{SimpleTrackInfoWithRef}II}{MainTimer=^^?^{TimerManager}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{function<void ()>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}II{TrackedLocation=}{Mutex={_opaque_pthread_mutex_t=l[40c]}}}^{Session}{shared_ptr<sp::SessionAudio>=^{SessionAudio}{shared_count=^{sp_counted_base}}}{shared_ptr<sp::SessionStreamingRules>=^{SessionStreamingRules}{shared_count=^{sp_counted_base}}}^{TimerManager}{RefPtr<spotify::item_list::TrackListFactory>=^{TrackListFactory}}i{RefPtr<sp::CoreTime>=^{CoreTime}}{shared_ptr<sp::SpircDeviceInterface>=^{SpircDeviceInterface}{shared_count=^{sp_counted_base}}}{RawScopedObserver<sp::SpircDeviceInterface, sp::SpircDeviceObserver>=^{SpircDeviceInterface}^{SpircDeviceObserver}}{RawScopedObserver<sp::SpircDeviceMap, sp::SpircDeviceMapObserver>=^{SpircDeviceMap}^{SpircDeviceMapObserver}}B{RefPtr<spotify::lookup::ResourceLookup<spotify::uri::SpotifyLink, const sp::TrackInfo *, spotify::lookup::TrackLookupParameters> >=^{ResourceLookup<spotify::uri::SpotifyLink, const sp::TrackInfo *, spotify::lookup::TrackLookupParameters>}}BBBB{Timer=^^?^{TimerManager}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{function<void ()>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}II{TrackedLocation=}{Mutex={_opaque_pthread_mutex_t=l[40c]}}}B{optional<spotify::uri::PlaybackId>=B{aligned_storage<spotify::uri::PlaybackId>=(dummy_u=[16c]c)}}BBBBBBBBiB{PlayOrigin={String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}B{String=(?=*^{StrPtrStruct})}}II{RefPtr<const sp::TrackInfo>=^{TrackInfo}}IIIII^{PlaylistTrackListContext}iIB{Timer=^^?^{TimerManager}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{function<void ()>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}II{TrackedLocation=}{Mutex={_opaque_pthread_mutex_t=l[40c]}}}iBBB{scoped_connection={weak_ptr<boost::signals2::detail::connection_body_base>=^{connection_body_base}{weak_count=^{sp_counted_base}}}}{signal<void (spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags)>, boost::function<void (const boost::signals2::connection &, spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags)>, boost::signals2::mutex>=^^?{shared_ptr<boost::signals2::detail::signal_impl<void (spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags)>, boost::function<void (const boost::signals2::connection &, spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags)>, boost::signals2::mutex> >=^{signal_impl<void (spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags)>, boost::function<void (const boost::signals2::connection &, spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags)>, boost::signals2::mutex>}{shared_count=^{sp_counted_base}}}}{function<void (const sp::TrackListContext &, sp::TrackPlayerSkip)>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}{function<boost::optional<bool> (sp::TrackListContext *, int, unsigned int, const sp::PlayOrigin &, unsigned int, const boost::optional<boost::chrono::time_point<boost::chrono::system_clock, boost::chrono::duration<long long, boost::ratio<1, 1000000000> > > > &)>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}{function<bool (unsigned int, bool)>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}{function<const sp::TrackInfo *(int)>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}{optional<boost::chrono::time_point<boost::chrono::system_clock, boost::chrono::duration<long long, boost::ratio<1, 1000000000> > > >=B{aligned_storage<boost::chrono::time_point<boost::chrono::system_clock, boost::chrono::duration<long long, boost::ratio<1, 1000000000> > > >=(dummy_u=[8c]{a4=})}}}, name: _player
    SPSession *_session;
    NSObject<PlayableContextProtocol> *_pendingContext;
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)keyPathsForValuesAffectingShuffle;
@property(retain, nonatomic) NSObject<PlayableContextProtocol> *pendingContext; // @synthesize pendingContext=_pendingContext;
@property(retain, nonatomic) SPSession *session; // @synthesize session=_session;
// Error parsing type for property player:
// Property attributes: T^{TrackPlayerMgr=^^?^^?^^?^^?{WeakReferenceOwner=^{Flag}}^^?^^?B{TrackPlayerMgrNotifier=^^?^{TrackPlayerMgrInterface}{signal<void (sp::TrackPlayerMgrInterface *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackPlayerMgrInterface *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackPlayerMgrInterface *, unsigned int)>, boost::signals2::mutex>=^^?{shared_ptr<boost::signals2::detail::signal_impl<void (sp::TrackPlayerMgrInterface *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackPlayerMgrInterface *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackPlayerMgrInterface *, unsigned int)>, boost::signals2::mutex> >=^{signal_impl<void (sp::TrackPlayerMgrInterface *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackPlayerMgrInterface *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackPlayerMgrInterface *, unsigned int)>, boost::signals2::mutex>}{shared_count=^{sp_counted_base}}}}{signal<void (sp::TrackPlayerMgrInterface *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackPlayerMgrInterface *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackPlayerMgrInterface *, unsigned int)>, boost::signals2::mutex>=^^?{shared_ptr<boost::signals2::detail::signal_impl<void (sp::TrackPlayerMgrInterface *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackPlayerMgrInterface *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackPlayerMgrInterface *, unsigned int)>, boost::signals2::mutex> >=^{signal_impl<void (sp::TrackPlayerMgrInterface *, unsigned int), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (sp::TrackPlayerMgrInterface *, unsigned int)>, boost::function<void (const boost::signals2::connection &, sp::TrackPlayerMgrInterface *, unsigned int)>, boost::signals2::mutex>}{shared_count=^{sp_counted_base}}}}Ii}{scoped_connection={weak_ptr<boost::signals2::detail::connection_body_base>=^{connection_body_base}{weak_count=^{sp_counted_base}}}}{TrackInfoWithRef={RefPtr<const sp::TrackInfo>=^{TrackInfo}}{TrackRef=^{TrackRefTarget}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BI}}{PlayOrigin={String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}B{String=(?=*^{StrPtrStruct})}}{TrackInfoWithRef={RefPtr<const sp::TrackInfo>=^{TrackInfo}}{TrackRef=^{TrackRefTarget}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BI}}{PlayOrigin={String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}B{String=(?=*^{StrPtrStruct})}}i{RefPtr<const sp::TrackInfo>=^{TrackInfo}}{RefPtr<sp::PlayQueueModel>=^{PlayQueueModel}}{scoped_connection={weak_ptr<boost::signals2::detail::connection_body_base>=^{connection_body_base}{weak_count=^{sp_counted_base}}}}{position=qI}BBBii{scoped_connection={weak_ptr<boost::signals2::detail::connection_body_base>=^{connection_body_base}{weak_count=^{sp_counted_base}}}}{scoped_connection={weak_ptr<boost::signals2::detail::connection_body_base>=^{connection_body_base}{weak_count=^{sp_counted_base}}}}{RefPtr<const sp::TrackInfo>=^{TrackInfo}}{shared_ptr<spotify::ads::AdManagerInterface>=^{AdManagerInterface}{shared_count=^{sp_counted_base}}}{RefPtr<sp::TrackListContext>=^{TrackListContext}}{RefPtr<sp::TrackListContext>=^{TrackListContext}}{RefPtr<sp::TrackListContext>=^{TrackListContext}}{scoped_connection={weak_ptr<boost::signals2::detail::connection_body_base>=^{connection_body_base}{weak_count=^{sp_counted_base}}}}{RefPtr<sp::PlayHistoryModel>=^{PlayHistoryModel}}{LocalTrackPlayabilityChecker=^^?BB{shared_ptr<sp::TpmRules>=^{TpmRules}{shared_count=^{sp_counted_base}}}{shared_ptr<sp::MftRules>=^{MftRules}{shared_count=^{sp_counted_base}}}{function<boost::chrono::duration<long long, boost::ratio<1, 1> > ()>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}{scoped_connection={weak_ptr<boost::signals2::detail::connection_body_base>=^{connection_body_base}{weak_count=^{sp_counted_base}}}}B{shared_ptr<sp::SessionStreamingRules>=^{SessionStreamingRules}{shared_count=^{sp_counted_base}}}}B{function<base::PassRefPtr<sp::TrackListTrackListContext> (const base::RefPtr<spotify::item_list::ItemList<base::RefPtr<spotify::item_list::TrackRow>, const sp::TrackInfo *> > &)>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}{Array<sp::SimpleTrackInfoWithRef, const sp::SimpleTrackInfoWithRef &, 64, true>=^{SimpleTrackInfoWithRef}II}{MainTimer=^^?^{TimerManager}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{function<void ()>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}II{TrackedLocation=}{Mutex={_opaque_pthread_mutex_t=l[40c]}}}^{Session}{shared_ptr<sp::SessionAudio>=^{SessionAudio}{shared_count=^{sp_counted_base}}}{shared_ptr<sp::SessionStreamingRules>=^{SessionStreamingRules}{shared_count=^{sp_counted_base}}}^{TimerManager}{RefPtr<spotify::item_list::TrackListFactory>=^{TrackListFactory}}i{RefPtr<sp::CoreTime>=^{CoreTime}}{shared_ptr<sp::SpircDeviceInterface>=^{SpircDeviceInterface}{shared_count=^{sp_counted_base}}}{RawScopedObserver<sp::SpircDeviceInterface, sp::SpircDeviceObserver>=^{SpircDeviceInterface}^{SpircDeviceObserver}}{RawScopedObserver<sp::SpircDeviceMap, sp::SpircDeviceMapObserver>=^{SpircDeviceMap}^{SpircDeviceMapObserver}}B{RefPtr<spotify::lookup::ResourceLookup<spotify::uri::SpotifyLink, const sp::TrackInfo *, spotify::lookup::TrackLookupParameters> >=^{ResourceLookup<spotify::uri::SpotifyLink, const sp::TrackInfo *, spotify::lookup::TrackLookupParameters>}}BBBB{Timer=^^?^{TimerManager}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{function<void ()>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}II{TrackedLocation=}{Mutex={_opaque_pthread_mutex_t=l[40c]}}}B{optional<spotify::uri::PlaybackId>=B{aligned_storage<spotify::uri::PlaybackId>=(dummy_u=[16c]c)}}BBBBBBBBiB{PlayOrigin={String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}{String=(?=*^{StrPtrStruct})}B{String=(?=*^{StrPtrStruct})}}II{RefPtr<const sp::TrackInfo>=^{TrackInfo}}IIIII^{PlaylistTrackListContext}iIB{Timer=^^?^{TimerManager}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{function<void ()>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}II{TrackedLocation=}{Mutex={_opaque_pthread_mutex_t=l[40c]}}}iBBB{scoped_connection={weak_ptr<boost::signals2::detail::connection_body_base>=^{connection_body_base}{weak_count=^{sp_counted_base}}}}{signal<void (spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags)>, boost::function<void (const boost::signals2::connection &, spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags)>, boost::signals2::mutex>=^^?{shared_ptr<boost::signals2::detail::signal_impl<void (spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags)>, boost::function<void (const boost::signals2::connection &, spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags)>, boost::signals2::mutex> >=^{signal_impl<void (spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags)>, boost::function<void (const boost::signals2::connection &, spotify::prefetch::PlaybackContext::PlaybackContextChangeFlags)>, boost::signals2::mutex>}{shared_count=^{sp_counted_base}}}}{function<void (const sp::TrackListContext &, sp::TrackPlayerSkip)>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}{function<boost::optional<bool> (sp::TrackListContext *, int, unsigned int, const sp::PlayOrigin &, unsigned int, const boost::optional<boost::chrono::time_point<boost::chrono::system_clock, boost::chrono::duration<long long, boost::ratio<1, 1000000000> > > > &)>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}{function<bool (unsigned int, bool)>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}{function<const sp::TrackInfo *(int)>=^{vtable_base}(function_buffer=^v{type_t=^{type_info}BB}^?{bound_memfunc_ptr_t=^v}{obj_ref_t=^vBB}c)}{optional<boost::chrono::time_point<boost::chrono::system_clock, boost::chrono::duration<long long, boost::ratio<1, 1000000000> > > >=B{aligned_storage<boost::chrono::time_point<boost::chrono::system_clock, boost::chrono::duration<long long, boost::ratio<1, 1000000000> > > >=(dummy_u=[8c]{a4=})}}},N,V_player

@property(nonatomic) id <PlayerAudioSessionDelegate> audioSessionDelegate; // @synthesize audioSessionDelegate=_audioSessionDelegate;
@property(retain, nonatomic) SPTrackContext *playingContext; // @synthesize playingContext=_playingContext;
@property(nonatomic) __weak id <PlayControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)sessionLoginModeChanged:(id)arg1;
- (BOOL)isUsingLocalPlayer;
- (void)ensureCorrectLoginMode;
@property(nonatomic) BOOL shuffle;
@property(nonatomic) BOOL pause;
- (void)setInbox:(id)arg1;
- (void)playTrackCommand:(id)arg1;
- (BOOL)playRow:(int)arg1 fromContext:(id)arg2 paused:(BOOL)arg3 shuffled:(BOOL)arg4 offset:(int)arg5;
- (BOOL)playRow:(int)arg1 fromContext:(id)arg2 paused:(BOOL)arg3 shuffled:(BOOL)arg4;
- (BOOL)playRow:(int)arg1 fromContext:(id)arg2 flags:(int)arg3 offset:(int)arg4;
- (BOOL)playContextShuffled:(id)arg1;
- (BOOL)playRow:(int)arg1 fromContext:(id)arg2;
- (BOOL)playContext:(id)arg1 forceShuffle:(BOOL)arg2;
- (int)availabilityForTrack:(id)arg1 inContext:(id)arg2;
- (int)trackAvailabilityForResourceAvailability:(int)arg1;
- (void)notifyDelegateOnPlaybackError:(id)arg1;
- (void)handlePlayerChangeError;
- (void)handlePlayerIsOfflineError;
- (void)dealloc;
- (void)invalidate;
- (id)initWithSession:(id)arg1 adController:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

