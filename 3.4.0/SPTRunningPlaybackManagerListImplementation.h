//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "SPTDataLoaderDelegate.h"
#import "SPTPlayerObserver.h"
#import "SPTRunningPlaybackManager.h"
#import "SPTRunningStepManagerObserver.h"

@class NSArray, NSDictionary, NSMapTable, NSString, NSTimer, NSURL, SPTDataLoader, SPTLogCenter, SPTPlayOptions, SPTPlayerContext, SPTPlayerRestrictions, SPTPlayerState, SPTRunningAudioUXManager, SPTRunningImageCache, SPTRunningLocalisationManagerImplementation, SPTRunningPlaybackStateRestorer, SPTRunningStepManager;

@interface SPTRunningPlaybackManagerListImplementation : NSObject <SPTDataLoaderDelegate, SPTPlayerObserver, SPTRunningStepManagerObserver, SPTRunningPlaybackManager>
{
    _Bool _currentContext;
    _Bool _automaticallyChangingTempo;
    unsigned long long _tempo;
    SPTDataLoader *_dataLoader;
    id <SPTPlayer> _player;
    SPTRunningStepManager *_stepManager;
    SPTRunningAudioUXManager *_audioUXManager;
    id <SPTProductState> _productState;
    id <SPTLocalSettings> _localSettings;
    SPTLogCenter *_logCenter;
    id <SPTRunningTestManager> _testManager;
    SPTRunningLocalisationManagerImplementation *_localisationManager;
    SPTRunningPlaybackStateRestorer *_playbackStateRestorer;
    SPTRunningImageCache *_imageCache;
    unsigned long long _minimumTempo;
    unsigned long long _maximumTempo;
    SPTPlayerState *_playerState;
    NSArray *_sortedTempoKeys;
    id <SPTCancellationToken> _cancellationToken;
    NSURL *_viewURL;
    NSDictionary *_tempoPlaybackList;
    SPTPlayOptions *_playOptions;
    SPTPlayerRestrictions *_restrictions;
    SPTPlayerContext *_context;
    NSMapTable *_observers;
    NSURL *_currentPlaybackURL;
    double _lastLoggedTempo;
    NSTimer *_logTimer;
}

@property(retain, nonatomic) NSTimer *logTimer; // @synthesize logTimer=_logTimer;
@property(nonatomic) double lastLoggedTempo; // @synthesize lastLoggedTempo=_lastLoggedTempo;
@property(retain, nonatomic) NSURL *currentPlaybackURL; // @synthesize currentPlaybackURL=_currentPlaybackURL;
@property(retain, nonatomic) NSMapTable *observers; // @synthesize observers=_observers;
@property(retain, nonatomic) SPTPlayerContext *context; // @synthesize context=_context;
@property(retain, nonatomic) SPTPlayerRestrictions *restrictions; // @synthesize restrictions=_restrictions;
@property(retain, nonatomic) SPTPlayOptions *playOptions; // @synthesize playOptions=_playOptions;
@property(retain, nonatomic) NSDictionary *tempoPlaybackList; // @synthesize tempoPlaybackList=_tempoPlaybackList;
@property(retain, nonatomic) NSURL *viewURL; // @synthesize viewURL=_viewURL;
@property(retain, nonatomic) id <SPTCancellationToken> cancellationToken; // @synthesize cancellationToken=_cancellationToken;
@property(retain, nonatomic) NSArray *sortedTempoKeys; // @synthesize sortedTempoKeys=_sortedTempoKeys;
@property(retain, nonatomic) SPTPlayerState *playerState; // @synthesize playerState=_playerState;
@property(nonatomic) unsigned long long maximumTempo; // @synthesize maximumTempo=_maximumTempo;
@property(nonatomic) unsigned long long minimumTempo; // @synthesize minimumTempo=_minimumTempo;
@property(retain, nonatomic) SPTRunningImageCache *imageCache; // @synthesize imageCache=_imageCache;
@property(retain, nonatomic) SPTRunningPlaybackStateRestorer *playbackStateRestorer; // @synthesize playbackStateRestorer=_playbackStateRestorer;
@property(retain, nonatomic) SPTRunningLocalisationManagerImplementation *localisationManager; // @synthesize localisationManager=_localisationManager;
@property(retain, nonatomic) id <SPTRunningTestManager> testManager; // @synthesize testManager=_testManager;
@property(retain, nonatomic) SPTLogCenter *logCenter; // @synthesize logCenter=_logCenter;
@property(retain, nonatomic) id <SPTLocalSettings> localSettings; // @synthesize localSettings=_localSettings;
@property(retain, nonatomic) id <SPTProductState> productState; // @synthesize productState=_productState;
@property(retain, nonatomic) SPTRunningAudioUXManager *audioUXManager; // @synthesize audioUXManager=_audioUXManager;
@property(retain, nonatomic) SPTRunningStepManager *stepManager; // @synthesize stepManager=_stepManager;
@property(retain, nonatomic) id <SPTPlayer> player; // @synthesize player=_player;
@property(retain, nonatomic) SPTDataLoader *dataLoader; // @synthesize dataLoader=_dataLoader;
@property(readonly, nonatomic, getter=isAutomaticallyChangingTempo) _Bool automaticallyChangingTempo; // @synthesize automaticallyChangingTempo=_automaticallyChangingTempo;
@property(nonatomic, getter=isCurrentContext) _Bool currentContext; // @synthesize currentContext=_currentContext;
@property(readonly, nonatomic) unsigned long long tempo; // @synthesize tempo=_tempo;
- (void).cxx_destruct;
- (void)logTimerFired:(id)arg1;
- (void)runningStepManagerDidChangeStableTempo:(id)arg1 fromTempo:(double)arg2;
- (void)player:(id)arg1 didEncounterError:(id)arg2;
- (void)player:(id)arg1 stateDidChange:(id)arg2;
- (void)dealloc;
- (id)init;
- (void)dataLoader:(id)arg1 didCancelRequest:(id)arg2;
- (void)dataLoader:(id)arg1 didReceiveErrorResponse:(id)arg2;
- (void)dataLoader:(id)arg1 didReceiveSuccessfulResponse:(id)arg2;
- (double)lengthForTrack:(id)arg1;
@property(nonatomic) double currentContextPosition;
@property(readonly, nonatomic) double currentContextLength;
- (void)syncPlaybackManagerWithStepManager;
- (void)setAutomaticallyChangingTempo:(_Bool)arg1 withChangingAudioUXVoiceover:(_Bool)arg2 playImmediately:(_Bool)arg3;
- (void)setAutomaticallyChangingTempo:(_Bool)arg1;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1 on:(id)arg2;
- (void)setTempo:(unsigned long long)arg1;
- (void)calculateShuffleWeightsForContext:(id)arg1;
- (void)syncWeightedShufflingWithStepManagerTempo;
- (void)playContext:(id)arg1 withOptions:(id)arg2 forURL:(id)arg3;
- (void)playTracks:(id)arg1 atTempo:(unsigned long long)arg2 shuffled:(_Bool)arg3 suppressions:(id)arg4 initiallyPaused:(_Bool)arg5 percentageMapping:(_Bool)arg6 fromURL:(id)arg7 weightedModifier:(double)arg8;
- (void)setAudioFadeInDuration:(double)arg1 forTrack:(id)arg2;
- (void)setAudioFadeInStartTime:(double)arg1 forTrack:(id)arg2;
- (void)syncStepTempoWithPlaybackTempo;
- (double)trackTempo:(id)arg1;
@property(readonly, nonatomic) double currentTrackTempo;
- (void)dispatchBlock:(CDUnknownBlockType)arg1 onQueue:(id)arg2;
- (void)playTempo:(unsigned long long)arg1 withNewTempoAudioUXVoiceover:(_Bool)arg2 automaticallyPlay:(_Bool)arg3;
- (void)setTempoPlaybackList:(id)arg1 viewURI:(id)arg2;
- (id)initWithDataLoader:(id)arg1 player:(id)arg2 stepManager:(id)arg3 audioUXManager:(id)arg4 productState:(id)arg5 localSettings:(id)arg6 logCenter:(id)arg7 testManager:(id)arg8 localisationManager:(id)arg9 playbackStateRestorer:(id)arg10 imageCache:(id)arg11;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

