//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "SPTOfflineModeStateObserver.h"
#import "SPTPartyGenresLoaderDelegate.h"
#import "SPTPartyPlaybackManagerDelegate.h"
#import "SPTPartyTracksLoaderDelegate.h"
#import "SPTPlayerObserver.h"
#import "SPTProductStateObserver.h"

@class NSString, SPTPartyGenre, SPTPartyGenresLoader, SPTPartyParameters, SPTPartyPlaybackManager, SPTPartyTracksLoader, SPTPartyViewModelData;

@interface SPTPartyViewModel : NSObject <SPTPlayerObserver, SPTOfflineModeStateObserver, SPTProductStateObserver, SPTPartyGenresLoaderDelegate, SPTPartyTracksLoaderDelegate, SPTPartyPlaybackManagerDelegate>
{
    _Bool _offline;
    _Bool _hasError;
    id <SPTPartyViewModelDelegate> _delegate;
    SPTPartyViewModelData *_data;
    id <SPTProductState> _productState;
    SPTPartyGenre *_currentSubGenre;
    SPTPartyGenre *_currentParentGenre;
    long long _currentEnergyLevel;
    SPTPartyParameters *_currentPartyParameters;
    SPTPartyGenresLoader *_genresLoader;
    SPTPartyTracksLoader *_tracksLoader;
    SPTPartyPlaybackManager *_playbackManager;
    id <SPTOfflineModeState> _offlineModeState;
}

@property(retain, nonatomic) id <SPTOfflineModeState> offlineModeState; // @synthesize offlineModeState=_offlineModeState;
@property(retain, nonatomic) SPTPartyPlaybackManager *playbackManager; // @synthesize playbackManager=_playbackManager;
@property(retain, nonatomic) SPTPartyTracksLoader *tracksLoader; // @synthesize tracksLoader=_tracksLoader;
@property(retain, nonatomic) SPTPartyGenresLoader *genresLoader; // @synthesize genresLoader=_genresLoader;
@property(nonatomic) _Bool hasError; // @synthesize hasError=_hasError;
@property(nonatomic, getter=isOffline) _Bool offline; // @synthesize offline=_offline;
@property(retain, nonatomic) SPTPartyParameters *currentPartyParameters; // @synthesize currentPartyParameters=_currentPartyParameters;
@property(readonly, nonatomic) long long currentEnergyLevel; // @synthesize currentEnergyLevel=_currentEnergyLevel;
@property(nonatomic) __weak SPTPartyGenre *currentParentGenre; // @synthesize currentParentGenre=_currentParentGenre;
@property(retain, nonatomic) SPTPartyGenre *currentSubGenre; // @synthesize currentSubGenre=_currentSubGenre;
@property(retain, nonatomic) id <SPTProductState> productState; // @synthesize productState=_productState;
@property(retain, nonatomic) SPTPartyViewModelData *data; // @synthesize data=_data;
@property(nonatomic) __weak id <SPTPartyViewModelDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)productState:(id)arg1 stateDidChange:(id)arg2;
- (void)offlineModeState:(id)arg1 updated:(_Bool)arg2;
- (_Bool)playbackManagerAllowsOnDemandPlayback:(id)arg1;
- (void)playbackManager:(id)arg1 playerStateDidChange:(id)arg2 fromState:(id)arg3;
- (void)tracksLoader:(id)arg1 didFailToLoadTracksWithError:(id)arg2;
- (void)tracksLoader:(id)arg1 didLoadTracks:(id)arg2;
- (void)genresLoader:(id)arg1 didFailToLoadGenresWithError:(id)arg2;
- (void)genresLoader:(id)arg1 didLoadGenreTree:(id)arg2;
- (_Bool)updateBasedOnNewParameters;
- (_Bool)shouldShowOfflineOrErrorView;
- (_Bool)reloadDataIfNecessary;
- (_Bool)isPlayingFromPartyContext;
- (void)togglePlayback;
- (_Bool)allowsOnDemandPlayback;
- (void)startShufflingIfPossible;
- (void)playTrackAtIndex:(unsigned long long)arg1;
- (id)playerTrackForIndex:(unsigned long long)arg1;
- (_Bool)isTrackCurrentlyActive:(id)arg1;
- (_Bool)setCurrentEnergyLevel:(long long)arg1;
- (_Bool)setCurrentParentGenreIndex:(unsigned long long)arg1 childGenreIndex:(unsigned long long)arg2;
- (id)indexPathForCurrentlyPlayingTrack;
- (long long)indexForCurrentParentGenre;
- (_Bool)loadTracks;
- (_Bool)loadGenres;
- (id)initWithGenresLoader:(id)arg1 tracksLoader:(id)arg2 playbackManager:(id)arg3 offlineModeState:(id)arg4 productState:(id)arg5;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

