//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class CMAltimeter, CMMotionManager, NSDictionary, NSMapTable, NSMutableArray, NSOperationQueue, NSTimer, NSUUID, SPTAccelerometerFilter, SPTCadence, SPTLogCenter, SPTManager, SPTSignalEnergy, SPTZeroCrossing;

@interface SPTRunningStepManager : NSObject
{
    _Bool _enabled;
    _Bool _steppingDetected;
    _Bool _stable;
    double _tempo;
    double _stabilityProgress;
    double _stableTempo;
    double _energy;
    NSDictionary *_stepTrackerVariables;
    NSUUID *_runningIdentifier;
    SPTLogCenter *_logCenter;
    id <SPTRunningTestManager> _testManager;
    CMMotionManager *_motionManager;
    NSOperationQueue *_motionQueue;
    CMAltimeter *_altimeter;
    NSOperationQueue *_altimeterQueue;
    SPTAccelerometerFilter *_filter;
    SPTCadence *_cadence;
    SPTSignalEnergy *_energyFilter;
    SPTZeroCrossing *_zeroCrossing;
    SPTManager *_manager;
    NSMapTable *_observers;
    NSMapTable *_enabledObservers;
    long long _samplesCollected;
    NSMutableArray *_motionLogs;
    double _pressure;
    NSTimer *_steppingDetectedTimeout;
    CDStruct_31142d93 _rotation;
}

@property(retain, nonatomic) NSTimer *steppingDetectedTimeout; // @synthesize steppingDetectedTimeout=_steppingDetectedTimeout;
@property CDStruct_31142d93 rotation; // @synthesize rotation=_rotation;
@property double pressure; // @synthesize pressure=_pressure;
@property(retain) NSMutableArray *motionLogs; // @synthesize motionLogs=_motionLogs;
@property long long samplesCollected; // @synthesize samplesCollected=_samplesCollected;
@property(retain, nonatomic) NSMapTable *enabledObservers; // @synthesize enabledObservers=_enabledObservers;
@property(retain, nonatomic) NSMapTable *observers; // @synthesize observers=_observers;
@property(retain) SPTManager *manager; // @synthesize manager=_manager;
@property(retain) SPTZeroCrossing *zeroCrossing; // @synthesize zeroCrossing=_zeroCrossing;
@property(retain) SPTSignalEnergy *energyFilter; // @synthesize energyFilter=_energyFilter;
@property(retain) SPTCadence *cadence; // @synthesize cadence=_cadence;
@property(retain) SPTAccelerometerFilter *filter; // @synthesize filter=_filter;
@property(retain, nonatomic) NSOperationQueue *altimeterQueue; // @synthesize altimeterQueue=_altimeterQueue;
@property(retain, nonatomic) CMAltimeter *altimeter; // @synthesize altimeter=_altimeter;
@property(retain, nonatomic) NSOperationQueue *motionQueue; // @synthesize motionQueue=_motionQueue;
@property(retain, nonatomic) CMMotionManager *motionManager; // @synthesize motionManager=_motionManager;
@property(nonatomic) __weak id <SPTRunningTestManager> testManager; // @synthesize testManager=_testManager;
@property(retain, nonatomic) SPTLogCenter *logCenter; // @synthesize logCenter=_logCenter;
@property(retain) NSUUID *runningIdentifier; // @synthesize runningIdentifier=_runningIdentifier;
@property(retain, nonatomic) NSDictionary *stepTrackerVariables; // @synthesize stepTrackerVariables=_stepTrackerVariables;
@property(nonatomic) double energy; // @synthesize energy=_energy;
@property(nonatomic) double stableTempo; // @synthesize stableTempo=_stableTempo;
@property(nonatomic) double stabilityProgress; // @synthesize stabilityProgress=_stabilityProgress;
@property(nonatomic, getter=isStable) _Bool stable; // @synthesize stable=_stable;
@property(nonatomic) double tempo; // @synthesize tempo=_tempo;
@property(nonatomic, getter=isSteppingDetected) _Bool steppingDetected; // @synthesize steppingDetected=_steppingDetected;
@property(nonatomic, getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;
- (void).cxx_destruct;
- (void)steppingDetectedTimedout:(id)arg1;
- (void)currentCentredTempo:(double)arg1;
- (void)logCurrentRawTempoData;
- (void)clearProperties;
- (void)resetState;
- (void)dispatchBlock:(CDUnknownBlockType)arg1 onQueue:(id)arg2;
- (void)removeEnabledObserver:(id)arg1;
- (void)addEnabledObserver:(id)arg1 on:(id)arg2;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1 on:(id)arg2;
- (id)initWithLogCenter:(id)arg1 testManager:(id)arg2;

@end

